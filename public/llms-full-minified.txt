# Nobox Documentation Full Content for LLMs - Minified
# Last updated: 2025-08-10

## Getting Started
### Nobox - AI-Powered Backend as a Service
URL: https://docs.nobox.cloud/
DESCRIPTION: The fastest way to integrate AI into your applications. Access 300+ AI models through a single API with built-in usage tracking and wallet billing.

<div class="hero-section">
  <div class="hero-content">
    <div class="hero-badge">
      üöÄ AI-Powered Backend as a Service
    </div>
    <h1 class="hero-title">
      The Complete AI Backend
      <span class="hero-highlight">for Modern Apps</span>
    </h1>
    <p class="hero-description">
      <strong>Nobox</strong> is the fastest way to integrate AI into your applications. Access <strong>300+ AI models</strong> from providers like OpenAI, Anthropic, Google, and Meta through a single, OpenAI-compatible API.
    </p>
    <p class="hero-subtitle">
      Unlike traditional AI API services, Nobox combines AI capabilities with a complete backend solution - giving you database operations, authentication, file uploads, and AI all in one platform.
    </p>
    <div class="hero-actions">
      <a href="#quick-start" class="btn-primary">Get Started</a>
      <a href="/allowed-models" class="btn-secondary">View 300+ Models</a>
    </div>
  </div>
</div>

<style jsx>
{`
  .hero-section {
    background: linear-gradient(135deg, var(--primary-50) 0%, var(--blue-50) 100%);
    border-radius: var(--border-radius-lg);
    margin: var(--spacing-lg) 0 var(--spacing-2xl);
    padding: var(--spacing-3xl) var(--spacing-2xl);
    text-align: center;
    position: relative;
    overflow: hidden;
  }
  
  .hero-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml;utf8,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23f3f4f6" fill-opacity="0.3"><circle cx="30" cy="30" r="1.5"/></g></svg>') repeat;
    opacity: 0.4;
  }
  
  .hero-content {
    position: relative;
    z-index: 1;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .hero-badge {
    display: inline-block;
    background: var(--primary-100);
    color: var(--primary-800);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--spacing-lg);
    border: 1px solid var(--primary-200);
  }
  
  .hero-title {
    font-size: var(--font-size-6xl);
    font-weight: var(--font-weight-extrabold);
    line-height: var(--line-height-tight);
    margin-bottom: var(--spacing-lg);
    color: var(--text-primary);
  }
  
  .hero-highlight {
    background: linear-gradient(135deg, var(--primary-400), var(--accent));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .hero-description {
    font-size: var(--font-size-xl);
    line-height: var(--line-height-relaxed);
    color: var(--text-secondary);
    margin-bottom: var(--spacing-sm);
  }
  
  .hero-subtitle {
    font-size: var(--font-size-lg);
    line-height: var(--line-height-relaxed);
    color: var(--text-tertiary);
    margin-bottom: var(--spacing-xl);
  }
  
  .hero-actions {
    display: flex;
    gap: var(--spacing-lg);
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .btn-primary, .btn-secondary {
    display: inline-flex;
    align-items: center;
    padding: var(--spacing-md) var(--spacing-xl);
    border-radius: var(--border-radius);
    text-decoration: none;
    font-weight: var(--font-weight-semibold);
    font-size: var(--font-size-base);
    transition: all 200ms ease;
    border: 2px solid transparent;
  }
  
  .btn-primary {
    background: var(--accent);
    color: var(--text-inverse);
    box-shadow: var(--shadow);
  }
  
  .btn-primary:hover {
    background: var(--blue-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-lg);
    text-decoration: none;
  }
  
  .btn-secondary {
    background: var(--background);
    color: var(--text-primary);
    border-color: var(--border-strong);
    box-shadow: var(--shadow-sm);
  }
  
  .btn-secondary:hover {
    background: var(--surface);
    border-color: var(--accent);
    transform: translateY(-1px);
    box-shadow: var(--shadow);
    text-decoration: none;
  }
  
  @media screen and (max-width: 768px) {
    .hero-section {
      padding: var(--spacing-3xl) var(--spacing-lg);
      margin: var(--spacing-lg) 0 var(--spacing-3xl);
    }
    
    .hero-title {
      font-size: var(--font-size-4xl);
    }
    
    .hero-description {
      font-size: var(--font-size-lg);
    }
    
    .hero-subtitle {
      font-size: var(--font-size-base);
    }
    
    .hero-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .btn-primary, .btn-secondary {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }
  }
`}
</style>

<div id="quick-start" class="section-container">

## üöÄ Quick Start with AI

<div class="feature-callout">
  Get started with AI in just 2 minutes. No complex setup, no API key management across multiple providers.
</div>

<div class="code-section">
  <h3 class="code-section-title">
    <span class="section-icon">üîó</span>
    OpenAI-Compatible API
  </h3>
  <p class="code-section-description">
    Drop-in replacement for OpenAI API calls. Works with official OpenAI client libraries.
  </p>
</div>

```javascript
import OpenAI from 'openai';

const client = new OpenAI({
  baseURL: 'https://api.nobox.cloud/_f_/v1',
  apiKey: 'your-nobox-token' // Single token for all models
});

const response = await client.chat.completions.create({
  model: 'gpt-4o', // or claude-3.5-sonnet, gemini-pro, llama-3.3-70b
  messages: [
    { role: 'user', content: 'Explain quantum computing' }
  ]
});
```

<div class="code-section">
  <h3 class="code-section-title">
    <span class="section-icon">üåê</span>
    Direct HTTP API
  </h3>
</div>

```javascript
const response = await fetch('https://api.nobox.cloud/_f_/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer your-nobox-token',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    model: 'anthropic/claude-3.5-sonnet',
    messages: [{ role: 'user', content: 'Hello world' }]
  })
});
```

</div>

<div class="features-grid">

## ‚ö° Why Choose Nobox for AI?

<div class="feature-cards">
  <div class="feature-card">
    <div class="feature-icon">üîÑ</div>
    <h3>Single API, 300+ Models</h3>
    <ul>
      <li>Access GPT-4o, Claude 3.5, Gemini Pro, Llama 3.3, and 300+ more models</li>
      <li>No need to manage multiple API keys or providers</li>
      <li>Automatic model routing and fallbacks</li>
    </ul>
  </div>

  <div class="feature-card">
    <div class="feature-icon">üìä</div>
    <h3>Built-in Usage Tracking</h3>
    <ul>
      <li>Real-time usage monitoring and cost tracking</li>
      <li>Wallet-based billing with transparent pricing</li>
      <li>Set spending limits and usage alerts</li>
    </ul>
  </div>

  <div class="feature-card">
    <div class="feature-icon">‚ö°</div>
    <h3>OpenAI-Compatible</h3>
    <ul>
      <li>Drop-in replacement for OpenAI API</li>
      <li>Works with existing OpenAI client libraries</li>
      <li>Streaming support for real-time responses</li>
    </ul>
  </div>

  <div class="feature-card">
    <div class="feature-icon">üõ†Ô∏è</div>
    <h3>Complete Backend Solution</h3>
    <ul>
      <li>Database operations (CRUD, search, population)</li>
      <li>User authentication and authorization</li>
      <li>File uploads and storage</li>
      <li>All integrated with your AI workflows</li>
    </ul>
  </div>
</div>

</div>

## ü§ñ Available AI Models

| Provider | Popular Models | Specialization |
|----------|----------------|----------------|
| **OpenAI** | GPT-4o, GPT-4.1, o1, o3 | General AI, coding, reasoning |
| **Anthropic** | Claude 3.5 Sonnet, Claude 4 | Long context, analysis |
| **Google** | Gemini Pro, Gemini Flash | Multimodal, fast responses |
| **Meta** | Llama 3.3 70B, Llama 4 | Open source, efficient |
| **DeepSeek** | DeepSeek R1, DeepSeek V3 | Math, coding, reasoning |
| **Mistral** | Mixtral 8x22B, Codestral | Multilingual, coding |

[**View All 300+ Models ‚Üí**](/allowed-models)

## üîß More Than Just AI

Nobox gives you a complete backend platform:

### **Database Operations**
```typescript
const posts = await PostModel.find({}, {
  populate: [{
    fields: { from: "user", localKey: "authorId", newField: "author" },
    space: "user"
  }]
});
```

### **Authentication**
Built-in user management, JWT tokens, and role-based access control.

### **File Storage**
Upload and manage files with automatic CDN distribution.

## üöÄ Get Started Now

{% callout type="note" %}
**AI integration requires no SDK** - use the direct HTTP API or any OpenAI-compatible client library.
{% /callout %}

1. **[Create Account](https://dashboard.nobox.cloud)** - Get your API token
2. **[View AI Models](/allowed-models)** - Browse 300+ available models
3. **[API Documentation](/ai/access-model)** - Start making AI calls
4. **[Install SDK](/install-nobox)** - Add database operations (optional)

### Popular Starting Points:
- **[AI Models API](/ai/access-model)** - Direct API documentation
- **[All Available Models](/allowed-models)** - Complete model catalog
- **[Database SDK](/install-nobox)** - Add backend operations
- **[Authentication](/functions/login)** - User management

<style jsx>
{`
  .section-container {
    margin: var(--spacing-2xl) 0;
  }
  
  .feature-callout {
    background: var(--accent-light);
    color: var(--accent);
    padding: var(--spacing-md) var(--spacing-lg);
    border-radius: var(--border-radius);
    border-left: 4px solid var(--accent);
    margin: var(--spacing-md) 0 var(--spacing-lg);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
  }
  
  .code-section {
    margin: var(--spacing-lg) 0 var(--spacing-md);
  }
  
  .code-section-title {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: var(--text-primary);
    margin-bottom: var(--spacing-sm);
  }
  
  .section-icon {
    font-size: var(--font-size-lg);
  }
  
  .code-section-description {
    color: var(--text-secondary);
    font-size: var(--font-size-base);
    margin-bottom: var(--spacing-lg);
  }
  
  .features-grid {
    margin: var(--spacing-xl) 0;
  }
  
  .feature-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin: var(--spacing-lg) 0;
  }
  
  .feature-card {
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: var(--border-radius-lg);
    padding: var(--spacing-xl);
    box-shadow: var(--shadow-sm);
    transition: all 200ms ease;
    position: relative;
    overflow: hidden;
  }
  
  .feature-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--primary-400), var(--accent));
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 300ms ease;
  }
  
  .feature-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    border-color: var(--theme);
  }
  
  .feature-card:hover::before {
    transform: scaleX(1);
  }
  
  .feature-icon {
    font-size: var(--font-size-3xl);
    margin-bottom: var(--spacing-md);
    display: block;
  }
  
  .feature-card h3 {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin-bottom: var(--spacing-md);
    margin-top: 0;
  }
  
  .feature-card ul {
    margin: 0;
    padding-left: var(--spacing-lg);
  }
  
  .feature-card li {
    color: var(--text-secondary);
    margin-bottom: var(--spacing-sm);
    line-height: var(--line-height-relaxed);
  }
  
  .feature-card li:last-child {
    margin-bottom: 0;
  }
  
  @media screen and (max-width: 768px) {
    .feature-cards {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
    }
    
    .feature-card {
      padding: var(--spacing-lg);
    }
  }
`}
</style>

### What is Nobox?
URL: https://docs.nobox.cloud/what-is-nobox
DESCRIPTION: Explains what Nobox is all about

# What is Nobox?

Nobox is a powerful backend as a service (BaaS) product that simplifies the development process for client-facing applications. With Nobox, developers can leverage backend-related services such as authentication, authorization, and CRUD (Create, Read, Update, Delete) operations on records without the need to set up and maintain a complex backend infrastructure.

## Getting Started

To start using Nobox, you can install the Nobox npm client library available on GitHub: [Nobox Npm Client](https://github.com/nobox-org/nobox-js-client). The npm client provides all the necessary functionalities and APIs to integrate Nobox into your JavaScript codebase.

## Future Development

We are continuously working to expand the capabilities of Nobox and make it available on various platforms. In the future, we plan to release additional SDKs and client libraries to enable the use of Nobox in non-JavaScript platforms. We welcome your suggestions and ideas for new clients and SDKs. Feel free to reach out to us at `nobox.hq@gmail.com` with your feedback.

## Next Steps

- [Install Nobox](/install-nobox) to start incorporating the power of Nobox into your applications.

### Install Nobox
URL: https://docs.nobox.cloud/install-nobox
DESCRIPTION: How to get started with Nobox

# Install Nobox
Run `npm i nobox-client`

## Next steps

- [Integrate Nobox Into your Project](/integrate-nobox)

### Integrate Nobox into your Javascript/Typescript project
URL: https://docs.nobox.cloud/integrate-nobox
DESCRIPTION: How to integrate nobox into your project

# {% $markdoc.frontmatter.title %}
{% callout type="note" %}
You can clone or study our [nobox example project](https://github.com/nobox-org/nobox-react-example)
{% /callout %}

1. Install nobox client `npm i nobox-client` if you haven't
1. Go to [nobox.cloud](https://nobox.cloud) or your local Nobox console, register and copy the token provided
2. Create a folder and name it `nobox` or anything else
3. Create a `config.ts` file in the `nobox` folder you created and add the following code:
    ```ts
    import  {  Config,  getFunctions,  getSchemaCreator  }  from  "nobox-client";

    export const config: Config = {
    endpoint:  "https://api.nobox.cloud", // or http://localhost:8000 if you are running local
    project:  "[yourproject]", //Replace [yourProject] with your desired project name
    token: "[yourToken]", //Replace [yourtoken] with the token you copied in step 2
    };

    export const createRowSchema = getSchemaCreator(config, { type: "rowed" });

    export const createKeyGroupSchema = getSchemaCreator(config, { type: "key-group" });

    export  const  Nobox  =  getFunctions(config);
    ```

4. Create a folder called `record-structures` (or any other name) inside the nobox folder
5. Create a file inside the `record-structures` folder and name it `user.ts` (or any other name). This is just an example.
6. Copy the following code into the `user.ts` file. You can modify the structure as needed:

    ```ts
    import { Space } from "nobox-client";
    import { createRowSchema } from "../config";

    interface User {
        email: string;
        password: string;
        firstName: string;
        age: number;
    }

    export const UserStructure: Space<User> = {
        space: "User",
        description: "A Record Space for Users",
        structure: {
            email: {
                description: "User's Email",
                type: String,
                required: true
            },
            password: {
                description: "User's Password",
                required: true,
                type: String,
                hashed: true
            },
            firstName: {
                description: "User's First Name",
                required: true,
                type: String,
            },
            age: {
                description: "User's Age",
                required: false,
                type: Number,
            }
        }
    }

    export const UserModel = createRowSchema<User>(UserStructure);
    ```

 6. After following these steps, your project folder structure should look like the tree representation below::
    ```md
    .
    ‚îú‚îÄ‚îÄ nobox
    ‚îÇ   ‚îú‚îÄ‚îÄ config.ts
    ‚îÇ   ‚îî‚îÄ‚îÄ record-structures
    ‚îÇ       ‚îú‚îÄ‚îÄ app-details.ts
    ‚îÇ       ‚îú‚îÄ‚îÄ cars.ts
    ‚îÇ       ‚îî‚îÄ‚îÄ user.ts
    ‚îú‚îÄ‚îÄ package.json
    ```

## Next steps
- [Use Nobox](/nobox-examples)
- [Search Methods](/methods/search)

## API Reference
### Nobox API Reference
URL: https://docs.nobox.cloud/api-reference
DESCRIPTION: Complete API reference for Nobox backend as a service

# Nobox API Reference

Complete API reference for Nobox backend as a service.

## Authentication

```typescript
import { NoboxClient } from "nobox-client";

const client = new NoboxClient({
  token: "your-api-token",
  projectId: "your-project-id"
});
```

## Schema Types

### Rowed Schema
```typescript
interface User {
  id: string;
  name: string;
  email: string;
  age: number;
}
```

### Key-Value Schema
```typescript
interface Settings {
  id: string;
  values: Record<string, any>;
}
```

## CRUD Operations

### Create
- `insert(data: T[])` - Insert multiple records
- `insertOne(data: T)` - Insert single record

### Read
- `find(filter?, options?)` - Get multiple records
- `findOne(filter?, options?)` - Get single record

### Update
- `updateOne(filter, data)` - Update single record
- `updateOneById(id, data)` - Update by ID

### Delete
- `deleteOneById(id)` - Delete by ID

## Search Operations

```typescript
const results = await UserModel.search({
  searchableFields: ['name', 'email'],
  searchText: 'john'
});
```

## File Operations

```typescript
const upload = await UserModel.upload(file, {
  folder: 'avatars',
  maxSize: 5 * 1024 * 1024
});
```

## Advanced Features

### Population
```typescript
const postsWithAuthors = await PostModel.find({}, {
  populate: [{
    fields: {
      from: "user",
      localKey: "authorId", 
      foreignKey: "id",
      newField: "author"
    },
    space: "user"
  }]
});
```

### Key-Value Operations
- `setKeys(keys)` - Set key-value pairs
- `getKeys()` - Get all key-value pairs
- `getTokenOwner()` - Get token owner info

## Error Handling

```typescript
try {
  const user = await UserModel.insertOne(data);
} catch (error) {
  console.error('Error:', error.message);
}
```

## Next Steps

- [Install Nobox](/install-nobox)
- [Integration Guide](/integrate-nobox)
- [Examples](/nobox-examples)

## Models
### Allowed AI Models
URL: https://docs.nobox.cloud/allowed-models
DESCRIPTION: Full list of all allowed AI models available in Nobox with provider, modality and basic cost info.

{% ai-models-tools popularProviders=["anthropic", "google", "meta-llama", "mistralai", "nvidia", "openai", "qwen"] popularModelLabels=["GPT-4o", "GPT-4.1", "Claude 3.5", "Gemini 1.5", "Mixtral 8x22B", "Llama 3.3"] popularModelQueries=["gpt-4o", "gpt-4.1", "claude 3.5", "gemini 1.5", "mixtral 8x22b", "llama 3.3"] /%}

Updated: 2025-08-10

Total models: 312

Tip: Use the search to filter models by name, id, modality or provider.

### agentica-org (2) {% #agentica-org %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Agentica: Deepcoder 14B Preview | agentica-org ‚Ä¢ text->text | `agentica-org/deepcoder-14b-preview` | text->text | 96,000 | 0.000000015 | 0.000000015 |
| Agentica: Deepcoder 14B Preview (free) | agentica-org ‚Ä¢ text->text | `agentica-org/deepcoder-14b-preview:free` | text->text | 96,000 | 0 | 0 |

### aion-labs (3) {% #aion-labs %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| AionLabs: Aion-1.0 | aion-labs ‚Ä¢ text->text | `aion-labs/aion-1.0` | text->text | 131,072 | 0.000004 | 0.000008 |
| AionLabs: Aion-1.0-Mini | aion-labs ‚Ä¢ text->text | `aion-labs/aion-1.0-mini` | text->text | 131,072 | 0.0000007 | 0.0000014 |
| AionLabs: Aion-RP 1.0 (8B) | aion-labs ‚Ä¢ text->text | `aion-labs/aion-rp-llama-3.1-8b` | text->text | 32,768 | 0.0000002 | 0.0000002 |

### alfredpros (1) {% #alfredpros %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| AlfredPros: CodeLLaMa 7B Instruct Solidity | alfredpros ‚Ä¢ text->text | `alfredpros/codellama-7b-instruct-solidity` | text->text | 8,192 | 0.0000006 | 0.000001 |

### alpindale (1) {% #alpindale %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Goliath 120B | alpindale ‚Ä¢ text->text | `alpindale/goliath-120b` | text->text | 6,144 | 0.000009 | 0.000011 |

### amazon (3) {% #amazon %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Amazon: Nova Lite 1.0 | amazon ‚Ä¢ text+image->text | `amazon/nova-lite-v1` | text+image->text | 300,000 | 0.00000006 | 0.00000024 |
| Amazon: Nova Micro 1.0 | amazon ‚Ä¢ text->text | `amazon/nova-micro-v1` | text->text | 128,000 | 0.000000035 | 0.00000014 |
| Amazon: Nova Pro 1.0 | amazon ‚Ä¢ text+image->text | `amazon/nova-pro-v1` | text+image->text | 300,000 | 0.0000008 | 0.0000032 |

### anthracite-org (2) {% #anthracite-org %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Magnum v2 72B | anthracite-org ‚Ä¢ text->text | `anthracite-org/magnum-v2-72b` | text->text | 32,768 | 0.000003 | 0.000003 |
| Magnum v4 72B | anthracite-org ‚Ä¢ text->text | `anthracite-org/magnum-v4-72b` | text->text | 16,384 | 0.0000025 | 0.000003 |

### anthropic (17) {% #anthropic %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Anthropic: Claude 3 Haiku | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3-haiku` | text+image->text | 200,000 | 0.00000025 | 0.00000125 |
| Anthropic: Claude 3 Haiku (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3-haiku:beta` | text+image->text | 200,000 | 0.00000025 | 0.00000125 |
| Anthropic: Claude 3 Opus | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3-opus` | text+image->text | 200,000 | 0.000015 | 0.000075 |
| Anthropic: Claude 3 Opus (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3-opus:beta` | text+image->text | 200,000 | 0.000015 | 0.000075 |
| Anthropic: Claude 3.5 Haiku | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-haiku` | text+image->text | 200,000 | 0.0000008 | 0.000004 |
| Anthropic: Claude 3.5 Haiku (2024-10-22) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-haiku-20241022` | text+image->text | 200,000 | 0.0000008 | 0.000004 |
| Anthropic: Claude 3.5 Haiku (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-haiku:beta` | text+image->text | 200,000 | 0.0000008 | 0.000004 |
| Anthropic: Claude 3.5 Sonnet | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-sonnet` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.5 Sonnet (2024-06-20) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-sonnet-20240620` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.5 Sonnet (2024-06-20) (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-sonnet-20240620:beta` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.5 Sonnet (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.5-sonnet:beta` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.7 Sonnet | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.7-sonnet` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.7 Sonnet (self-moderated) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.7-sonnet:beta` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude 3.7 Sonnet (thinking) | anthropic ‚Ä¢ text+image->text | `anthropic/claude-3.7-sonnet:thinking` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Anthropic: Claude Opus 4 | anthropic ‚Ä¢ text+image->text | `anthropic/claude-opus-4` | text+image->text | 200,000 | 0.000015 | 0.000075 |
| Claude Opus 4.1 | anthropic ‚Ä¢ text+image->text | `anthropic/claude-opus-4.1` | text+image->text | 200,000 | 0.000015 | 0.000075 |
| Claude Sonnet 4 | Excellent for coding | `anthropic/claude-sonnet-4` | text+image->text | 200,000 | 0.000003 | 0.000015 |

### arcee-ai (4) {% #arcee-ai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Arcee AI: Coder Large | arcee-ai ‚Ä¢ text->text | `arcee-ai/coder-large` | text->text | 32,768 | 0.0000005 | 0.0000008 |
| Arcee AI: Maestro Reasoning | arcee-ai ‚Ä¢ text->text | `arcee-ai/maestro-reasoning` | text->text | 131,072 | 0.0000009 | 0.0000033 |
| Arcee AI: Spotlight | arcee-ai ‚Ä¢ text+image->text | `arcee-ai/spotlight` | text+image->text | 131,072 | 0.00000018 | 0.00000018 |
| Arcee AI: Virtuoso Large | arcee-ai ‚Ä¢ text->text | `arcee-ai/virtuoso-large` | text->text | 131,072 | 0.00000075 | 0.0000012 |

### arliai (2) {% #arliai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| ArliAI: QwQ 32B RpR v1 | arliai ‚Ä¢ text->text | `arliai/qwq-32b-arliai-rpr-v1` | text->text | 32,768 | 0.00000001 | 0.0000000400032 |
| ArliAI: QwQ 32B RpR v1 (free) | arliai ‚Ä¢ text->text | `arliai/qwq-32b-arliai-rpr-v1:free` | text->text | 32,768 | 0 | 0 |

### baidu (1) {% #baidu %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Baidu: ERNIE 4.5 300B A47B  | baidu ‚Ä¢ text->text | `baidu/ernie-4.5-300b-a47b` | text->text | 123,000 | 0.00000028 | 0.0000011 |

### bytedance (1) {% #bytedance %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Bytedance: UI-TARS 7B  | bytedance ‚Ä¢ text+image->text | `bytedance/ui-tars-1.5-7b` | text+image->text | 128,000 | 0.0000001 | 0.0000002 |

### cognitivecomputations (6) {% #cognitivecomputations %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Dolphin 2.9.2 Mixtral 8x22B üê¨ | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin-mixtral-8x22b` | text->text | 16,000 | 0.0000009 | 0.0000009 |
| Dolphin3.0 Mistral 24B | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin3.0-mistral-24b` | text->text | 32,768 | 0.000000037022 | 0.00000014816 |
| Dolphin3.0 Mistral 24B (free) | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin3.0-mistral-24b:free` | text->text | 32,768 | 0 | 0 |
| Dolphin3.0 R1 Mistral 24B | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin3.0-r1-mistral-24b` | text->text | 32,768 | 0.00000001 | 0.0000000340768 |
| Dolphin3.0 R1 Mistral 24B (free) | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin3.0-r1-mistral-24b:free` | text->text | 32,768 | 0 | 0 |
| Venice: Uncensored | cognitivecomputations ‚Ä¢ text->text | `cognitivecomputations/dolphin-mistral-24b-venice-edition:free` | text->text | 32,768 | 0 | 0 |

### cohere (9) {% #cohere %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Cohere: Command | cohere ‚Ä¢ text->text | `cohere/command` | text->text | 4,096 | 0.000001 | 0.000002 |
| Cohere: Command A | cohere ‚Ä¢ text->text | `cohere/command-a` | text->text | 32,768 | 0.000002 | 0.000008 |
| Cohere: Command R | cohere ‚Ä¢ text->text | `cohere/command-r` | text->text | 128,000 | 0.0000005 | 0.0000015 |
| Cohere: Command R (03-2024) | cohere ‚Ä¢ text->text | `cohere/command-r-03-2024` | text->text | 128,000 | 0.0000005 | 0.0000015 |
| Cohere: Command R (08-2024) | cohere ‚Ä¢ text->text | `cohere/command-r-08-2024` | text->text | 128,000 | 0.00000015 | 0.0000006 |
| Cohere: Command R+ | cohere ‚Ä¢ text->text | `cohere/command-r-plus` | text->text | 128,000 | 0.000003 | 0.000015 |
| Cohere: Command R+ (04-2024) | cohere ‚Ä¢ text->text | `cohere/command-r-plus-04-2024` | text->text | 128,000 | 0.000003 | 0.000015 |
| Cohere: Command R+ (08-2024) | cohere ‚Ä¢ text->text | `cohere/command-r-plus-08-2024` | text->text | 128,000 | 0.0000025 | 0.00001 |
| Cohere: Command R7B (12-2024) | cohere ‚Ä¢ text->text | `cohere/command-r7b-12-2024` | text->text | 128,000 | 0.0000000375 | 0.00000015 |

### deepseek (19) {% #deepseek %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| DeepSeek: DeepSeek Prover V2 | deepseek ‚Ä¢ text->text | `deepseek/deepseek-prover-v2` | text->text | 163,840 | 0.0000005 | 0.00000218 |
| DeepSeek: Deepseek R1 0528 Qwen3 8B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-0528-qwen3-8b` | text->text | 32,000 | 0.00000001 | 0.00000002 |
| DeepSeek: Deepseek R1 0528 Qwen3 8B (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-0528-qwen3-8b:free` | text->text | 131,072 | 0 | 0 |
| DeepSeek: DeepSeek V3 | deepseek ‚Ä¢ text->text | `deepseek/deepseek-chat` | text->text | 163,840 | 0.00000017992692 | 0.0000007200576 |
| DeepSeek: DeepSeek V3 0324 | deepseek ‚Ä¢ text->text | `deepseek/deepseek-chat-v3-0324` | text->text | 163,840 | 0.00000017992692 | 0.0000007200576 |
| DeepSeek: DeepSeek V3 0324 (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-chat-v3-0324:free` | text->text | 163,840 | 0 | 0 |
| DeepSeek: DeepSeek V3 Base | deepseek ‚Ä¢ text->text | `deepseek/deepseek-v3-base` | text->text | 163,840 | 0.0000001999188 | 0.000000800064 |
| DeepSeek: R1 | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1` | text->text | 163,840 | 0.0000004 | 0.000002 |
| DeepSeek: R1 (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1:free` | text->text | 163,840 | 0 | 0 |
| DeepSeek: R1 0528 | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-0528` | text->text | 163,840 | 0.00000017992692 | 0.0000007200576 |
| DeepSeek: R1 0528 (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-0528:free` | text->text | 163,840 | 0 | 0 |
| DeepSeek: R1 Distill Llama 70B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-llama-70b` | text->text | 131,072 | 0.0000000333198 | 0.000000133344 |
| DeepSeek: R1 Distill Llama 70B (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-llama-70b:free` | text->text | 8,192 | 0 | 0 |
| DeepSeek: R1 Distill Llama 8B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-llama-8b` | text->text | 32,000 | 0.00000004 | 0.00000004 |
| DeepSeek: R1 Distill Qwen 1.5B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-qwen-1.5b` | text->text | 131,072 | 0.00000018 | 0.00000018 |
| DeepSeek: R1 Distill Qwen 14B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-qwen-14b` | text->text | 64,000 | 0.00000015 | 0.00000015 |
| DeepSeek: R1 Distill Qwen 14B (free) | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-qwen-14b:free` | text->text | 64,000 | 0 | 0 |
| DeepSeek: R1 Distill Qwen 32B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-qwen-32b` | text->text | 131,072 | 0.000000075 | 0.00000015 |
| DeepSeek: R1 Distill Qwen 7B | deepseek ‚Ä¢ text->text | `deepseek/deepseek-r1-distill-qwen-7b` | text->text | 131,072 | 0.0000001 | 0.0000002 |

### eleutherai (1) {% #eleutherai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| EleutherAI: Llemma 7b | eleutherai ‚Ä¢ text->text | `eleutherai/llemma_7b` | text->text | 4,096 | 0.0000008 | 0.0000012 |

### featherless (1) {% #featherless %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Qrwkv 72B (free) | featherless ‚Ä¢ text->text | `featherless/qwerky-72b:free` | text->text | 32,768 | 0 | 0 |

### google (25) {% #google %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Google: Gemini 1.5 Flash  | google ‚Ä¢ text+image->text | `google/gemini-flash-1.5` | text+image->text | 1,000,000 | 0.000000075 | 0.0000003 |
| Google: Gemini 1.5 Flash 8B | google ‚Ä¢ text+image->text | `google/gemini-flash-1.5-8b` | text+image->text | 1,000,000 | 0.0000000375 | 0.00000015 |
| Google: Gemini 1.5 Pro | google ‚Ä¢ text+image->text | `google/gemini-pro-1.5` | text+image->text | 2,000,000 | 0.00000125 | 0.000005 |
| Google: Gemini 2.0 Flash | google ‚Ä¢ text+image->text | `google/gemini-2.0-flash-001` | text+image->text | 1,048,576 | 0.0000001 | 0.0000004 |
| Google: Gemini 2.0 Flash Experimental (free) | google ‚Ä¢ text+image->text | `google/gemini-2.0-flash-exp:free` | text+image->text | 1,048,576 | 0 | 0 |
| Google: Gemini 2.0 Flash Lite | google ‚Ä¢ text+image->text | `google/gemini-2.0-flash-lite-001` | text+image->text | 1,048,576 | 0.000000075 | 0.0000003 |
| Google: Gemini 2.5 Flash | google ‚Ä¢ text+image->text | `google/gemini-2.5-flash` | text+image->text | 1,048,576 | 0.0000003 | 0.0000025 |
| Google: Gemini 2.5 Flash Lite | google ‚Ä¢ text+image->text | `google/gemini-2.5-flash-lite` | text+image->text | 1,048,576 | 0.0000001 | 0.0000004 |
| Google: Gemini 2.5 Flash Lite Preview 06-17 | google ‚Ä¢ text+image->text | `google/gemini-2.5-flash-lite-preview-06-17` | text+image->text | 1,048,576 | 0.0000001 | 0.0000004 |
| Google: Gemini 2.5 Pro | google ‚Ä¢ text+image->text | `google/gemini-2.5-pro` | text+image->text | 1,048,576 | 0.00000125 | 0.00001 |
| Google: Gemini 2.5 Pro Experimental | google ‚Ä¢ text+image->text | `google/gemini-2.5-pro-exp-03-25` | text+image->text | 1,048,576 | 0 | 0 |
| Google: Gemini 2.5 Pro Preview 05-06 | google ‚Ä¢ text+image->text | `google/gemini-2.5-pro-preview-05-06` | text+image->text | 1,048,576 | 0.00000125 | 0.00001 |
| Google: Gemini 2.5 Pro Preview 06-05 | google ‚Ä¢ text+image->text | `google/gemini-2.5-pro-preview` | text+image->text | 1,048,576 | 0.00000125 | 0.00001 |
| Google: Gemma 2 27B | google ‚Ä¢ text->text | `google/gemma-2-27b-it` | text->text | 8,192 | 0.00000065 | 0.00000065 |
| Google: Gemma 2 9B | google ‚Ä¢ text->text | `google/gemma-2-9b-it` | text->text | 8,192 | 0.00000001 | 0.0000000100008 |
| Google: Gemma 2 9B (free) | google ‚Ä¢ text->text | `google/gemma-2-9b-it:free` | text->text | 8,192 | 0 | 0 |
| Google: Gemma 3 12B | google ‚Ä¢ text+image->text | `google/gemma-3-12b-it` | text+image->text | 96,000 | 0.0000000481286 | 0.000000192608 |
| Google: Gemma 3 12B (free) | google ‚Ä¢ text+image->text | `google/gemma-3-12b-it:free` | text+image->text | 96,000 | 0 | 0 |
| Google: Gemma 3 27B | google ‚Ä¢ text+image->text | `google/gemma-3-27b-it` | text+image->text | 96,000 | 0.0000000666396 | 0.000000266688 |
| Google: Gemma 3 27B (free) | google ‚Ä¢ text+image->text | `google/gemma-3-27b-it:free` | text+image->text | 96,000 | 0 | 0 |
| Google: Gemma 3 4B | google ‚Ä¢ text+image->text | `google/gemma-3-4b-it` | text+image->text | 131,072 | 0.00000002 | 0.00000004 |
| Google: Gemma 3 4B (free) | google ‚Ä¢ text+image->text | `google/gemma-3-4b-it:free` | text+image->text | 32,768 | 0 | 0 |
| Google: Gemma 3n 2B (free) | google ‚Ä¢ text->text | `google/gemma-3n-e2b-it:free` | text->text | 8,192 | 0 | 0 |
| Google: Gemma 3n 4B | google ‚Ä¢ text->text | `google/gemma-3n-e4b-it` | text->text | 32,768 | 0.00000002 | 0.00000004 |
| Google: Gemma 3n 4B (free) | google ‚Ä¢ text->text | `google/gemma-3n-e4b-it:free` | text->text | 8,192 | 0 | 0 |

### gryphe (1) {% #gryphe %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| MythoMax 13B | gryphe ‚Ä¢ text->text | `gryphe/mythomax-l2-13b` | text->text | 4,096 | 0.00000006 | 0.00000006 |

### inception (2) {% #inception %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Inception: Mercury | inception ‚Ä¢ text->text | `inception/mercury` | text->text | 128,000 | 0.00000025 | 0.000001 |
| Inception: Mercury Coder | inception ‚Ä¢ text->text | `inception/mercury-coder` | text->text | 128,000 | 0.00000025 | 0.000001 |

### infermatic (1) {% #infermatic %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Infermatic: Mistral Nemo Inferor 12B | infermatic ‚Ä¢ text->text | `infermatic/mn-inferor-12b` | text->text | 8,192 | 0.0000006 | 0.000001 |

### inflection (2) {% #inflection %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Inflection: Inflection 3 Pi | inflection ‚Ä¢ text->text | `inflection/inflection-3-pi` | text->text | 8,000 | 0.0000025 | 0.00001 |
| Inflection: Inflection 3 Productivity | inflection ‚Ä¢ text->text | `inflection/inflection-3-productivity` | text->text | 8,000 | 0.0000025 | 0.00001 |

### liquid (3) {% #liquid %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Liquid: LFM 3B | liquid ‚Ä¢ text->text | `liquid/lfm-3b` | text->text | 32,768 | 0.00000002 | 0.00000002 |
| Liquid: LFM 40B MoE | liquid ‚Ä¢ text->text | `liquid/lfm-40b` | text->text | 65,536 | 0.00000015 | 0.00000015 |
| Liquid: LFM 7B | liquid ‚Ä¢ text->text | `liquid/lfm-7b` | text->text | 32,768 | 0.00000001 | 0.00000001 |

### mancer (1) {% #mancer %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Mancer: Weaver (alpha) | mancer ‚Ä¢ text->text | `mancer/weaver` | text->text | 8,000 | 0.0000015 | 0.0000015 |

### meta-llama (20) {% #meta-llama %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Llama Guard 3 8B | meta-llama ‚Ä¢ text->text | `meta-llama/llama-guard-3-8b` | text->text | 131,072 | 0.00000002 | 0.00000006 |
| Meta: Llama 3 70B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3-70b-instruct` | text->text | 8,192 | 0.0000003 | 0.0000004 |
| Meta: Llama 3 8B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3-8b-instruct` | text->text | 8,192 | 0.00000003 | 0.00000006 |
| Meta: Llama 3.1 405B (base) | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.1-405b` | text->text | 32,768 | 0.000002 | 0.000002 |
| Meta: Llama 3.1 405B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.1-405b-instruct` | text->text | 32,768 | 0.0000008 | 0.0000008 |
| Meta: Llama 3.1 405B Instruct (free) | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.1-405b-instruct:free` | text->text | 65,536 | 0 | 0 |
| Meta: Llama 3.1 70B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.1-70b-instruct` | text->text | 131,072 | 0.0000001 | 0.00000028 |
| Meta: Llama 3.1 8B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.1-8b-instruct` | text->text | 131,072 | 0.000000015 | 0.00000002 |
| Meta: Llama 3.2 11B Vision Instruct | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-3.2-11b-vision-instruct` | text+image->text | 131,072 | 0.000000049 | 0.000000049 |
| Meta: Llama 3.2 11B Vision Instruct (free) | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-3.2-11b-vision-instruct:free` | text+image->text | 131,072 | 0 | 0 |
| Meta: Llama 3.2 1B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.2-1b-instruct` | text->text | 131,072 | 0.000000005 | 0.00000001 |
| Meta: Llama 3.2 3B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.2-3b-instruct` | text->text | 20,000 | 0.000000003 | 0.000000006 |
| Meta: Llama 3.2 3B Instruct (free) | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.2-3b-instruct:free` | text->text | 131,072 | 0 | 0 |
| Meta: Llama 3.2 90B Vision Instruct | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-3.2-90b-vision-instruct` | text+image->text | 131,072 | 0.0000012 | 0.0000012 |
| Meta: Llama 3.3 70B Instruct | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.3-70b-instruct` | text->text | 131,072 | 0.000000038 | 0.00000012 |
| Meta: Llama 3.3 70B Instruct (free) | meta-llama ‚Ä¢ text->text | `meta-llama/llama-3.3-70b-instruct:free` | text->text | 65,536 | 0 | 0 |
| Meta: Llama 4 Maverick | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-4-maverick` | text+image->text | 1,048,576 | 0.00000015 | 0.0000006 |
| Meta: Llama 4 Scout | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-4-scout` | text+image->text | 1,048,576 | 0.00000008 | 0.0000003 |
| Meta: Llama Guard 4 12B | meta-llama ‚Ä¢ text+image->text | `meta-llama/llama-guard-4-12b` | text+image->text | 163,840 | 0.00000005 | 0.00000005 |
| Meta: LlamaGuard 2 8B | meta-llama ‚Ä¢ text->text | `meta-llama/llama-guard-2-8b` | text->text | 8,192 | 0.0000002 | 0.0000002 |

### microsoft (9) {% #microsoft %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Microsoft: MAI DS R1 | microsoft ‚Ä¢ text->text | `microsoft/mai-ds-r1` | text->text | 163,840 | 0.0000001999188 | 0.000000800064 |
| Microsoft: MAI DS R1 (free) | microsoft ‚Ä¢ text->text | `microsoft/mai-ds-r1:free` | text->text | 163,840 | 0 | 0 |
| Microsoft: Phi 4 | microsoft ‚Ä¢ text->text | `microsoft/phi-4` | text->text | 16,384 | 0.00000006 | 0.00000014 |
| Microsoft: Phi 4 Multimodal Instruct | microsoft ‚Ä¢ text+image->text | `microsoft/phi-4-multimodal-instruct` | text+image->text | 131,072 | 0.00000005 | 0.0000001 |
| Microsoft: Phi 4 Reasoning Plus | microsoft ‚Ä¢ text->text | `microsoft/phi-4-reasoning-plus` | text->text | 32,768 | 0.00000007 | 0.00000035 |
| Microsoft: Phi-3 Medium 128K Instruct | microsoft ‚Ä¢ text->text | `microsoft/phi-3-medium-128k-instruct` | text->text | 128,000 | 0.000001 | 0.000001 |
| Microsoft: Phi-3 Mini 128K Instruct | microsoft ‚Ä¢ text->text | `microsoft/phi-3-mini-128k-instruct` | text->text | 128,000 | 0.0000001 | 0.0000001 |
| Microsoft: Phi-3.5 Mini 128K Instruct | microsoft ‚Ä¢ text->text | `microsoft/phi-3.5-mini-128k-instruct` | text->text | 128,000 | 0.0000001 | 0.0000001 |
| WizardLM-2 8x22B | microsoft ‚Ä¢ text->text | `microsoft/wizardlm-2-8x22b` | text->text | 65,536 | 0.00000048 | 0.00000048 |

### minimax (2) {% #minimax %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| MiniMax: MiniMax M1 | minimax ‚Ä¢ text->text | `minimax/minimax-m1` | text->text | 1,000,000 | 0.0000003 | 0.00000165 |
| MiniMax: MiniMax-01 | minimax ‚Ä¢ text+image->text | `minimax/minimax-01` | text+image->text | 1,000,192 | 0.0000002 | 0.0000011 |

### mistralai (35) {% #mistralai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Mistral Large | mistralai ‚Ä¢ text->text | `mistralai/mistral-large` | text->text | 128,000 | 0.000002 | 0.000006 |
| Mistral Large 2407 | mistralai ‚Ä¢ text->text | `mistralai/mistral-large-2407` | text->text | 131,072 | 0.000002 | 0.000006 |
| Mistral Large 2411 | mistralai ‚Ä¢ text->text | `mistralai/mistral-large-2411` | text->text | 131,072 | 0.000002 | 0.000006 |
| Mistral Small | mistralai ‚Ä¢ text->text | `mistralai/mistral-small` | text->text | 32,768 | 0.0000002 | 0.0000006 |
| Mistral Tiny | mistralai ‚Ä¢ text->text | `mistralai/mistral-tiny` | text->text | 32,768 | 0.00000025 | 0.00000025 |
| Mistral: Codestral 2501 | mistralai ‚Ä¢ text->text | `mistralai/codestral-2501` | text->text | 262,144 | 0.0000003 | 0.0000009 |
| Mistral: Codestral 2508 | mistralai ‚Ä¢ text->text | `mistralai/codestral-2508` | text->text | 256,000 | 0.0000003 | 0.0000009 |
| Mistral: Devstral Medium | mistralai ‚Ä¢ text->text | `mistralai/devstral-medium` | text->text | 131,072 | 0.0000004 | 0.000002 |
| Mistral: Devstral Small 1.1 | mistralai ‚Ä¢ text->text | `mistralai/devstral-small` | text->text | 128,000 | 0.00000007 | 0.00000028 |
| Mistral: Devstral Small 2505 | mistralai ‚Ä¢ text->text | `mistralai/devstral-small-2505` | text->text | 32,768 | 0.00000001999188 | 0.0000000800064 |
| Mistral: Devstral Small 2505 (free) | mistralai ‚Ä¢ text->text | `mistralai/devstral-small-2505:free` | text->text | 32,768 | 0 | 0 |
| Mistral: Magistral Medium 2506 | mistralai ‚Ä¢ text->text | `mistralai/magistral-medium-2506` | text->text | 40,960 | 0.000002 | 0.000005 |
| Mistral: Magistral Medium 2506 (thinking) | mistralai ‚Ä¢ text->text | `mistralai/magistral-medium-2506:thinking` | text->text | 40,960 | 0.000002 | 0.000005 |
| Mistral: Magistral Small 2506 | mistralai ‚Ä¢ text->text | `mistralai/magistral-small-2506` | text->text | 40,000 | 0.0000005 | 0.0000015 |
| Mistral: Ministral 3B | mistralai ‚Ä¢ text->text | `mistralai/ministral-3b` | text->text | 32,768 | 0.00000004 | 0.00000004 |
| Mistral: Ministral 8B | mistralai ‚Ä¢ text->text | `mistralai/ministral-8b` | text->text | 128,000 | 0.0000001 | 0.0000001 |
| Mistral: Mistral 7B Instruct | mistralai ‚Ä¢ text->text | `mistralai/mistral-7b-instruct` | text->text | 32,768 | 0.000000028 | 0.000000054 |
| Mistral: Mistral 7B Instruct (free) | mistralai ‚Ä¢ text->text | `mistralai/mistral-7b-instruct:free` | text->text | 32,768 | 0 | 0 |
| Mistral: Mistral 7B Instruct v0.1 | mistralai ‚Ä¢ text->text | `mistralai/mistral-7b-instruct-v0.1` | text->text | 2,824 | 0.00000011 | 0.00000019 |
| Mistral: Mistral 7B Instruct v0.2 | mistralai ‚Ä¢ text->text | `mistralai/mistral-7b-instruct-v0.2` | text->text | 32,768 | 0.0000002 | 0.0000002 |
| Mistral: Mistral 7B Instruct v0.3 | mistralai ‚Ä¢ text->text | `mistralai/mistral-7b-instruct-v0.3` | text->text | 32,768 | 0.000000028 | 0.000000054 |
| Mistral: Mistral Medium 3 | mistralai ‚Ä¢ text+image->text | `mistralai/mistral-medium-3` | text+image->text | 131,072 | 0.0000004 | 0.000002 |
| Mistral: Mistral Nemo | mistralai ‚Ä¢ text->text | `mistralai/mistral-nemo` | text->text | 32,000 | 0.0000000075 | 0.00000005 |
| Mistral: Mistral Nemo (free) | mistralai ‚Ä¢ text->text | `mistralai/mistral-nemo:free` | text->text | 131,072 | 0 | 0 |
| Mistral: Mistral Small 3 | mistralai ‚Ä¢ text->text | `mistralai/mistral-small-24b-instruct-2501` | text->text | 32,768 | 0.00000001999188 | 0.0000000800064 |
| Mistral: Mistral Small 3 (free) | mistralai ‚Ä¢ text->text | `mistralai/mistral-small-24b-instruct-2501:free` | text->text | 32,768 | 0 | 0 |
| Mistral: Mistral Small 3.1 24B | mistralai ‚Ä¢ text+image->text | `mistralai/mistral-small-3.1-24b-instruct` | text+image->text | 131,072 | 0.000000017992692 | 0.00000007200576 |
| Mistral: Mistral Small 3.1 24B (free) | mistralai ‚Ä¢ text+image->text | `mistralai/mistral-small-3.1-24b-instruct:free` | text+image->text | 128,000 | 0 | 0 |
| Mistral: Mistral Small 3.2 24B | mistralai ‚Ä¢ text+image->text | `mistralai/mistral-small-3.2-24b-instruct` | text+image->text | 131,072 | 0.00000001999188 | 0.0000000800064 |
| Mistral: Mistral Small 3.2 24B (free) | mistralai ‚Ä¢ text+image->text | `mistralai/mistral-small-3.2-24b-instruct:free` | text+image->text | 131,072 | 0 | 0 |
| Mistral: Mixtral 8x22B Instruct | mistralai ‚Ä¢ text->text | `mistralai/mixtral-8x22b-instruct` | text->text | 65,536 | 0.0000009 | 0.0000009 |
| Mistral: Mixtral 8x7B Instruct | mistralai ‚Ä¢ text->text | `mistralai/mixtral-8x7b-instruct` | text->text | 32,768 | 0.00000008 | 0.00000024 |
| Mistral: Pixtral 12B | mistralai ‚Ä¢ text+image->text | `mistralai/pixtral-12b` | text+image->text | 32,768 | 0.0000001 | 0.0000001 |
| Mistral: Pixtral Large 2411 | mistralai ‚Ä¢ text+image->text | `mistralai/pixtral-large-2411` | text+image->text | 131,072 | 0.000002 | 0.000006 |
| Mistral: Saba | mistralai ‚Ä¢ text->text | `mistralai/mistral-saba` | text->text | 32,768 | 0.0000002 | 0.0000006 |

### moonshotai (5) {% #moonshotai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Kimi Dev 72b (free) | moonshotai ‚Ä¢ text->text | `moonshotai/kimi-dev-72b:free` | text->text | 131,072 | 0 | 0 |
| Moonshot AI: Kimi VL A3B Thinking | moonshotai ‚Ä¢ text+image->text | `moonshotai/kimi-vl-a3b-thinking` | text+image->text | 131,072 | 0.00000002498985 | 0.000000100008 |
| Moonshot AI: Kimi VL A3B Thinking (free) | moonshotai ‚Ä¢ text+image->text | `moonshotai/kimi-vl-a3b-thinking:free` | text+image->text | 131,072 | 0 | 0 |
| MoonshotAI: Kimi K2 | moonshotai ‚Ä¢ text->text | `moonshotai/kimi-k2` | text->text | 63,000 | 0.00000014 | 0.00000249 |
| MoonshotAI: Kimi K2 (free) | moonshotai ‚Ä¢ text->text | `moonshotai/kimi-k2:free` | text->text | 32,768 | 0 | 0 |

### morph (2) {% #morph %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Morph: Morph V3 Fast | morph ‚Ä¢ text->text | `morph/morph-v3-fast` | text->text | 81,920 | 0.0000009 | 0.0000019 |
| Morph: Morph V3 Large | morph ‚Ä¢ text->text | `morph/morph-v3-large` | text->text | 81,920 | 0.0000009 | 0.0000019 |

### neversleep (3) {% #neversleep %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| NeverSleep: Llama 3 Lumimaid 70B | neversleep ‚Ä¢ text->text | `neversleep/llama-3-lumimaid-70b` | text->text | 8,192 | 0.000004 | 0.000006 |
| NeverSleep: Lumimaid v0.2 8B | neversleep ‚Ä¢ text->text | `neversleep/llama-3.1-lumimaid-8b` | text->text | 8,192 | 0.0000001 | 0.0000009 |
| Noromaid 20B | neversleep ‚Ä¢ text->text | `neversleep/noromaid-20b` | text->text | 4,096 | 0.000001 | 0.00000175 |

### nousresearch (6) {% #nousresearch %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Nous: DeepHermes 3 Llama 3 8B Preview (free) | nousresearch ‚Ä¢ text->text | `nousresearch/deephermes-3-llama-3-8b-preview:free` | text->text | 131,072 | 0 | 0 |
| Nous: DeepHermes 3 Mistral 24B Preview | nousresearch ‚Ä¢ text->text | `nousresearch/deephermes-3-mistral-24b-preview` | text->text | 32,768 | 0.00000009329544 | 0.0000003733632 |
| Nous: Hermes 2 Mixtral 8x7B DPO | nousresearch ‚Ä¢ text->text | `nousresearch/nous-hermes-2-mixtral-8x7b-dpo` | text->text | 32,768 | 0.0000006 | 0.0000006 |
| Nous: Hermes 3 405B Instruct | nousresearch ‚Ä¢ text->text | `nousresearch/hermes-3-llama-3.1-405b` | text->text | 131,072 | 0.0000007 | 0.0000008 |
| Nous: Hermes 3 70B Instruct | nousresearch ‚Ä¢ text->text | `nousresearch/hermes-3-llama-3.1-70b` | text->text | 131,072 | 0.0000001 | 0.00000028 |
| NousResearch: Hermes 2 Pro - Llama-3 8B | nousresearch ‚Ä¢ text->text | `nousresearch/hermes-2-pro-llama-3-8b` | text->text | 131,072 | 0.000000025 | 0.00000004 |

### nvidia (4) {% #nvidia %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| NVIDIA: Llama 3.1 Nemotron 70B Instruct | nvidia ‚Ä¢ text->text | `nvidia/llama-3.1-nemotron-70b-instruct` | text->text | 131,072 | 0.00000012 | 0.0000003 |
| NVIDIA: Llama 3.1 Nemotron Ultra 253B v1 | nvidia ‚Ä¢ text->text | `nvidia/llama-3.1-nemotron-ultra-253b-v1` | text->text | 131,072 | 0.0000006 | 0.0000018 |
| NVIDIA: Llama 3.1 Nemotron Ultra 253B v1 (free) | nvidia ‚Ä¢ text->text | `nvidia/llama-3.1-nemotron-ultra-253b-v1:free` | text->text | 131,072 | 0 | 0 |
| NVIDIA: Llama 3.3 Nemotron Super 49B v1 | nvidia ‚Ä¢ text->text | `nvidia/llama-3.3-nemotron-super-49b-v1` | text->text | 131,072 | 0.00000013 | 0.0000004 |

### openai (39) {% #openai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| OpenAI: ChatGPT-4o | openai ‚Ä¢ text+image->text | `openai/chatgpt-4o-latest` | text+image->text | 128,000 | 0.000005 | 0.000015 |
| OpenAI: Codex Mini | openai ‚Ä¢ text+image->text | `openai/codex-mini` | text+image->text | 200,000 | 0.0000015 | 0.000006 |
| OpenAI: GPT-3.5 Turbo | openai ‚Ä¢ text->text | `openai/gpt-3.5-turbo` | text->text | 16,385 | 0.0000005 | 0.0000015 |
| OpenAI: GPT-3.5 Turbo (older v0613) | openai ‚Ä¢ text->text | `openai/gpt-3.5-turbo-0613` | text->text | 4,095 | 0.000001 | 0.000002 |
| OpenAI: GPT-3.5 Turbo 16k | openai ‚Ä¢ text->text | `openai/gpt-3.5-turbo-16k` | text->text | 16,385 | 0.000003 | 0.000004 |
| OpenAI: GPT-3.5 Turbo Instruct | openai ‚Ä¢ text->text | `openai/gpt-3.5-turbo-instruct` | text->text | 4,095 | 0.0000015 | 0.000002 |
| OpenAI: GPT-4 | openai ‚Ä¢ text->text | `openai/gpt-4` | text->text | 8,191 | 0.00003 | 0.00006 |
| OpenAI: GPT-4 (older v0314) | openai ‚Ä¢ text->text | `openai/gpt-4-0314` | text->text | 8,191 | 0.00003 | 0.00006 |
| OpenAI: GPT-4 Turbo | openai ‚Ä¢ text+image->text | `openai/gpt-4-turbo` | text+image->text | 128,000 | 0.00001 | 0.00003 |
| OpenAI: GPT-4 Turbo (older v1106) | openai ‚Ä¢ text->text | `openai/gpt-4-1106-preview` | text->text | 128,000 | 0.00001 | 0.00003 |
| OpenAI: GPT-4 Turbo Preview | openai ‚Ä¢ text->text | `openai/gpt-4-turbo-preview` | text->text | 128,000 | 0.00001 | 0.00003 |
| OpenAI: GPT-4.1 | openai ‚Ä¢ text+image->text | `openai/gpt-4.1` | text+image->text | 1,047,576 | 0.000002 | 0.000008 |
| OpenAI: GPT-4.1 Mini | openai ‚Ä¢ text+image->text | `openai/gpt-4.1-mini` | text+image->text | 1,047,576 | 0.0000004 | 0.0000016 |
| OpenAI: GPT-4.1 Nano | openai ‚Ä¢ text+image->text | `openai/gpt-4.1-nano` | text+image->text | 1,047,576 | 0.0000001 | 0.0000004 |
| OpenAI: GPT-4o | openai ‚Ä¢ text+image->text | `openai/gpt-4o` | text+image->text | 128,000 | 0.0000025 | 0.00001 |
| OpenAI: GPT-4o (2024-05-13) | openai ‚Ä¢ text+image->text | `openai/gpt-4o-2024-05-13` | text+image->text | 128,000 | 0.000005 | 0.000015 |
| OpenAI: GPT-4o (2024-11-20) | openai ‚Ä¢ text+image->text | `openai/gpt-4o-2024-11-20` | text+image->text | 128,000 | 0.0000025 | 0.00001 |
| OpenAI: GPT-4o (extended) | openai ‚Ä¢ text+image->text | `openai/gpt-4o:extended` | text+image->text | 128,000 | 0.000006 | 0.000018 |
| OpenAI: GPT-4o Search Preview | openai ‚Ä¢ text->text | `openai/gpt-4o-search-preview` | text->text | 128,000 | 0.0000025 | 0.00001 |
| OpenAI: GPT-4o-mini | openai ‚Ä¢ text+image->text | `openai/gpt-4o-mini` | text+image->text | 128,000 | 0.00000015 | 0.0000006 |
| OpenAI: GPT-4o-mini (2024-07-18) | openai ‚Ä¢ text+image->text | `openai/gpt-4o-mini-2024-07-18` | text+image->text | 128,000 | 0.00000015 | 0.0000006 |
| OpenAI: GPT-4o-mini Search Preview | openai ‚Ä¢ text->text | `openai/gpt-4o-mini-search-preview` | text->text | 128,000 | 0.00000015 | 0.0000006 |
| OpenAI: GPT-5 | openai ‚Ä¢ text+image->text | `openai/gpt-5` | text+image->text | 400,000 | 0.00000125 | 0.00001 |
| OpenAI: GPT-5 Chat | openai ‚Ä¢ text+image->text | `openai/gpt-5-chat` | text+image->text | 400,000 | 0.00000125 | 0.00001 |
| OpenAI: GPT-5 Mini | openai ‚Ä¢ text+image->text | `openai/gpt-5-mini` | text+image->text | 400,000 | 0.00000025 | 0.000002 |
| OpenAI: GPT-5 Nano | openai ‚Ä¢ text+image->text | `openai/gpt-5-nano` | text+image->text | 400,000 | 0.00000005 | 0.0000004 |
| OpenAI: gpt-oss-120b | openai ‚Ä¢ text->text | `openai/gpt-oss-120b` | text->text | 131,072 | 0.00000009 | 0.00000045 |
| OpenAI: gpt-oss-20b | openai ‚Ä¢ text->text | `openai/gpt-oss-20b` | text->text | 131,072 | 0.00000004 | 0.00000016 |
| OpenAI: gpt-oss-20b (free) | openai ‚Ä¢ text->text | `openai/gpt-oss-20b:free` | text->text | 131,072 | 0 | 0 |
| OpenAI: o1 | openai ‚Ä¢ text+image->text | `openai/o1` | text+image->text | 200,000 | 0.000015 | 0.00006 |
| OpenAI: o1-mini | openai ‚Ä¢ text->text | `openai/o1-mini` | text->text | 128,000 | 0.0000011 | 0.0000044 |
| OpenAI: o1-mini (2024-09-12) | openai ‚Ä¢ text->text | `openai/o1-mini-2024-09-12` | text->text | 128,000 | 0.0000011 | 0.0000044 |
| OpenAI: o1-pro | openai ‚Ä¢ text+image->text | `openai/o1-pro` | text+image->text | 200,000 | 0.00015 | 0.0006 |
| OpenAI: o3 | openai ‚Ä¢ text+image->text | `openai/o3` | text+image->text | 200,000 | 0.000002 | 0.000008 |
| OpenAI: o3 Mini | openai ‚Ä¢ text->text | `openai/o3-mini` | text->text | 200,000 | 0.0000011 | 0.0000044 |
| OpenAI: o3 Mini High | openai ‚Ä¢ text->text | `openai/o3-mini-high` | text->text | 200,000 | 0.0000011 | 0.0000044 |
| OpenAI: o3 Pro | openai ‚Ä¢ text+image->text | `openai/o3-pro` | text+image->text | 200,000 | 0.00002 | 0.00008 |
| OpenAI: o4 Mini | openai ‚Ä¢ text+image->text | `openai/o4-mini` | text+image->text | 200,000 | 0.0000011 | 0.0000044 |
| OpenAI: o4 Mini High | openai ‚Ä¢ text+image->text | `openai/o4-mini-high` | text+image->text | 200,000 | 0.0000011 | 0.0000044 |

### opengvlab (1) {% #opengvlab %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| OpenGVLab: InternVL3 14B | opengvlab ‚Ä¢ text+image->text | `opengvlab/internvl3-14b` | text+image->text | 12,288 | 0.0000002 | 0.0000004 |

### perplexity (6) {% #perplexity %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Perplexity: R1 1776 | perplexity ‚Ä¢ text->text | `perplexity/r1-1776` | text->text | 128,000 | 0.000002 | 0.000008 |
| Perplexity: Sonar | perplexity ‚Ä¢ text+image->text | `perplexity/sonar` | text+image->text | 127,072 | 0.000001 | 0.000001 |
| Perplexity: Sonar Deep Research | perplexity ‚Ä¢ text->text | `perplexity/sonar-deep-research` | text->text | 128,000 | 0.000002 | 0.000008 |
| Perplexity: Sonar Pro | perplexity ‚Ä¢ text+image->text | `perplexity/sonar-pro` | text+image->text | 200,000 | 0.000003 | 0.000015 |
| Perplexity: Sonar Reasoning Pro | perplexity ‚Ä¢ text+image->text | `perplexity/sonar-reasoning-pro` | text+image->text | 128,000 | 0.000002 | 0.000008 |
| Uncensored:Perplexity: Sonar Reasoning | perplexity ‚Ä¢ text->text | `perplexity/sonar-reasoning` | text->text | 127,000 | 0.000001 | 0.000005 |

### pygmalionai (1) {% #pygmalionai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Pygmalion: Mythalion 13B | pygmalionai ‚Ä¢ text->text | `pygmalionai/mythalion-13b` | text->text | 4,096 | 0.0000006 | 0.000001 |

### qwen (33) {% #qwen %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Qwen 2 72B Instruct | qwen ‚Ä¢ text->text | `qwen/qwen-2-72b-instruct` | text->text | 32,768 | 0.0000009 | 0.0000009 |
| Qwen: Qwen VL Max | qwen ‚Ä¢ text+image->text | `qwen/qwen-vl-max` | text+image->text | 7,500 | 0.0000008 | 0.0000032 |
| Qwen: Qwen VL Plus | qwen ‚Ä¢ text+image->text | `qwen/qwen-vl-plus` | text+image->text | 7,500 | 0.00000021 | 0.00000063 |
| Qwen: Qwen-Max  | qwen ‚Ä¢ text->text | `qwen/qwen-max` | text->text | 32,768 | 0.0000016 | 0.0000064 |
| Qwen: Qwen-Plus | qwen ‚Ä¢ text->text | `qwen/qwen-plus` | text->text | 131,072 | 0.0000004 | 0.0000012 |
| Qwen: Qwen-Turbo | qwen ‚Ä¢ text->text | `qwen/qwen-turbo` | text->text | 1,000,000 | 0.00000005 | 0.0000002 |
| Qwen: Qwen2.5 VL 32B Instruct | qwen ‚Ä¢ text+image->text | `qwen/qwen2.5-vl-32b-instruct` | text+image->text | 16,384 | 0.00000001999188 | 0.0000000800064 |
| Qwen: Qwen2.5 VL 32B Instruct (free) | qwen ‚Ä¢ text+image->text | `qwen/qwen2.5-vl-32b-instruct:free` | text+image->text | 8,192 | 0 | 0 |
| Qwen: Qwen2.5 VL 72B Instruct | qwen ‚Ä¢ text+image->text | `qwen/qwen2.5-vl-72b-instruct` | text+image->text | 32,000 | 0.00000025 | 0.00000075 |
| Qwen: Qwen2.5 VL 72B Instruct (free) | qwen ‚Ä¢ text+image->text | `qwen/qwen2.5-vl-72b-instruct:free` | text+image->text | 32,768 | 0 | 0 |
| Qwen: Qwen2.5-VL 7B Instruct | qwen ‚Ä¢ text+image->text | `qwen/qwen-2.5-vl-7b-instruct` | text+image->text | 32,768 | 0.0000002 | 0.0000002 |
| Qwen: Qwen3 14B | qwen ‚Ä¢ text->text | `qwen/qwen3-14b` | text->text | 40,960 | 0.00000006 | 0.00000024 |
| Qwen: Qwen3 14B (free) | qwen ‚Ä¢ text->text | `qwen/qwen3-14b:free` | text->text | 40,960 | 0 | 0 |
| Qwen: Qwen3 235B A22B |  | `qwen/qwen3-235b-a22b` | text->text | 40,960 | 0.00000013 | 0.0000006 |
| Qwen: Qwen3 235B A22B (free) | qwen ‚Ä¢ text->text | `qwen/qwen3-235b-a22b:free` | text->text | 131,072 | 0 | 0 |
| Qwen: Qwen3 235B A22B Instruct 2507 | qwen ‚Ä¢ text->text | `qwen/qwen3-235b-a22b-2507` | text->text | 262,144 | 0.000000077968332 | 0.00000031202496 |
| Qwen: Qwen3 235B A22B Thinking 2507 | qwen ‚Ä¢ text->text | `qwen/qwen3-235b-a22b-thinking-2507` | text->text | 262,144 | 0.000000077968332 | 0.00000031202496 |
| Qwen: Qwen3 30B A3B | qwen ‚Ä¢ text->text | `qwen/qwen3-30b-a3b` | text->text | 40,960 | 0.00000001999188 | 0.0000000800064 |
| Qwen: Qwen3 30B A3B (free) | qwen ‚Ä¢ text->text | `qwen/qwen3-30b-a3b:free` | text->text | 40,960 | 0 | 0 |
| Qwen: Qwen3 30B A3B Instruct 2507 | qwen ‚Ä¢ text->text | `qwen/qwen3-30b-a3b-instruct-2507` | text->text | 131,072 | 0.0000002 | 0.0000008 |
| Qwen: Qwen3 32B | qwen ‚Ä¢ text->text | `qwen/qwen3-32b` | text->text | 40,960 | 0.000000017992692 | 0.00000007200576 |
| Qwen: Qwen3 4B (free) | qwen ‚Ä¢ text->text | `qwen/qwen3-4b:free` | text->text | 40,960 | 0 | 0 |
| Qwen: Qwen3 8B | qwen ‚Ä¢ text->text | `qwen/qwen3-8b` | text->text | 128,000 | 0.000000035 | 0.000000138 |
| Qwen: Qwen3 8B (free) | qwen ‚Ä¢ text->text | `qwen/qwen3-8b:free` | text->text | 40,960 | 0 | 0 |
| Qwen: Qwen3 Coder  | qwen ‚Ä¢ text->text | `qwen/qwen3-coder` | text->text | 262,144 | 0.0000001999188 | 0.000000800064 |
| Qwen: QwQ 32B | qwen ‚Ä¢ text->text | `qwen/qwq-32b` | text->text | 131,072 | 0.000000075 | 0.00000015 |
| Qwen: QwQ 32B (free) | qwen ‚Ä¢ text->text | `qwen/qwq-32b:free` | text->text | 32,768 | 0 | 0 |
| Qwen: QwQ 32B Preview | qwen ‚Ä¢ text->text | `qwen/qwq-32b-preview` | text->text | 32,768 | 0.0000002 | 0.0000002 |
| Qwen2.5 72B Instruct | qwen ‚Ä¢ text->text | `qwen/qwen-2.5-72b-instruct` | text->text | 32,768 | 0.0000000666396 | 0.000000266688 |
| Qwen2.5 72B Instruct (free) | qwen ‚Ä¢ text->text | `qwen/qwen-2.5-72b-instruct:free` | text->text | 32,768 | 0 | 0 |
| Qwen2.5 7B Instruct | qwen ‚Ä¢ text->text | `qwen/qwen-2.5-7b-instruct` | text->text | 65,536 | 0.00000004 | 0.0000001 |
| Qwen2.5 Coder 32B Instruct | qwen ‚Ä¢ text->text | `qwen/qwen-2.5-coder-32b-instruct` | text->text | 32,768 | 0.0000000499797 | 0.000000200016 |
| Qwen2.5 Coder 32B Instruct (free) | qwen ‚Ä¢ text->text | `qwen/qwen-2.5-coder-32b-instruct:free` | text->text | 32,768 | 0 | 0 |

### raifle (1) {% #raifle %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| SorcererLM 8x22B | raifle ‚Ä¢ text->text | `raifle/sorcererlm-8x22b` | text->text | 16,000 | 0.0000045 | 0.0000045 |

### rekaai (1) {% #rekaai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Reka: Flash 3 (free) | rekaai ‚Ä¢ text->text | `rekaai/reka-flash-3:free` | text->text | 32,768 | 0 | 0 |

### sao10k (4) {% #sao10k %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Sao10K: Llama 3 8B Lunaris | sao10k ‚Ä¢ text->text | `sao10k/l3-lunaris-8b` | text->text | 8,192 | 0.00000002 | 0.00000005 |
| Sao10k: Llama 3 Euryale 70B v2.1 | sao10k ‚Ä¢ text->text | `sao10k/l3-euryale-70b` | text->text | 8,192 | 0.00000148 | 0.00000148 |
| Sao10K: Llama 3.1 Euryale 70B v2.2 | sao10k ‚Ä¢ text->text | `sao10k/l3.1-euryale-70b` | text->text | 32,768 | 0.00000065 | 0.00000075 |
| Sao10K: Llama 3.3 Euryale 70B | sao10k ‚Ä¢ text->text | `sao10k/l3.3-euryale-70b` | text->text | 131,072 | 0.00000065 | 0.00000075 |

### sarvamai (1) {% #sarvamai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Sarvam AI: Sarvam-M (free) | sarvamai ‚Ä¢ text->text | `sarvamai/sarvam-m:free` | text->text | 32,768 | 0 | 0 |

### scb10x (1) {% #scb10x %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Typhoon2 70B Instruct | scb10x ‚Ä¢ text->text | `scb10x/llama3.1-typhoon2-70b-instruct` | text->text | 8,192 | 0.00000088 | 0.00000088 |

### shisa-ai (2) {% #shisa-ai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Shisa AI: Shisa V2 Llama 3.3 70B  | shisa-ai ‚Ä¢ text->text | `shisa-ai/shisa-v2-llama3.3-70b` | text->text | 32,768 | 0.00000001999188 | 0.0000000800064 |
| Shisa AI: Shisa V2 Llama 3.3 70B  (free) | shisa-ai ‚Ä¢ text->text | `shisa-ai/shisa-v2-llama3.3-70b:free` | text->text | 32,768 | 0 | 0 |

### sophosympatheia (1) {% #sophosympatheia %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Midnight Rose 70B | sophosympatheia ‚Ä¢ text->text | `sophosympatheia/midnight-rose-70b` | text->text | 4,096 | 0.0000008 | 0.0000008 |

### tencent (2) {% #tencent %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Tencent: Hunyuan A13B Instruct | tencent ‚Ä¢ text->text | `tencent/hunyuan-a13b-instruct` | text->text | 32,768 | 0.00000003 | 0.00000003 |
| Tencent: Hunyuan A13B Instruct (free) | tencent ‚Ä¢ text->text | `tencent/hunyuan-a13b-instruct:free` | text->text | 32,768 | 0 | 0 |

### thedrummer (6) {% #thedrummer %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| TheDrummer: Anubis 70B V1.1 | thedrummer ‚Ä¢ text->text | `thedrummer/anubis-70b-v1.1` | text->text | 16,384 | 0.0000004 | 0.0000007 |
| TheDrummer: Anubis Pro 105B V1 | thedrummer ‚Ä¢ text->text | `thedrummer/anubis-pro-105b-v1` | text->text | 131,072 | 0.0000005 | 0.000001 |
| TheDrummer: Rocinante 12B | thedrummer ‚Ä¢ text->text | `thedrummer/rocinante-12b` | text->text | 8,192 | 0.00000019 | 0.00000045 |
| TheDrummer: Skyfall 36B V2 | thedrummer ‚Ä¢ text->text | `thedrummer/skyfall-36b-v2` | text->text | 32,768 | 0.0000000481286 | 0.000000192608 |
| TheDrummer: UnslopNemo 12B | thedrummer ‚Ä¢ text->text | `thedrummer/unslopnemo-12b` | text->text | 32,768 | 0.0000004 | 0.0000004 |
| TheDrummer: Valkyrie 49B V1 | thedrummer ‚Ä¢ text->text | `thedrummer/valkyrie-49b-v1` | text->text | 131,072 | 0.00000065 | 0.000001 |

### thudm (3) {% #thudm %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| THUDM: GLM 4 32B | thudm ‚Ä¢ text->text | `thudm/glm-4-32b` | text->text | 32,000 | 0.00000024 | 0.00000024 |
| THUDM: GLM 4.1V 9B Thinking | thudm ‚Ä¢ text+image->text | `thudm/glm-4.1v-9b-thinking` | text+image->text | 65,536 | 0.000000035 | 0.000000138 |
| THUDM: GLM Z1 32B (free) | thudm ‚Ä¢ text->text | `thudm/glm-z1-32b:free` | text->text | 32,768 | 0 | 0 |

### tngtech (3) {% #tngtech %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| TNG: DeepSeek R1T Chimera | tngtech ‚Ä¢ text->text | `tngtech/deepseek-r1t-chimera` | text->text | 163,840 | 0.00000017992692 | 0.0000007200576 |
| TNG: DeepSeek R1T Chimera (free) | tngtech ‚Ä¢ text->text | `tngtech/deepseek-r1t-chimera:free` | text->text | 163,840 | 0 | 0 |
| TNG: DeepSeek R1T2 Chimera (free) | tngtech ‚Ä¢ text->text | `tngtech/deepseek-r1t2-chimera:free` | text->text | 163,840 | 0 | 0 |

### undi95 (1) {% #undi95 %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| ReMM SLERP 13B | undi95 ‚Ä¢ text->text | `undi95/remm-slerp-l2-13b` | text->text | 6,144 | 0.0000007 | 0.000001 |

### x-ai (8) {% #x-ai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| xAI: Grok 2 1212 | x-ai ‚Ä¢ text->text | `x-ai/grok-2-1212` | text->text | 131,072 | 0.000002 | 0.00001 |
| xAI: Grok 2 Vision 1212 | x-ai ‚Ä¢ text+image->text | `x-ai/grok-2-vision-1212` | text+image->text | 32,768 | 0.000002 | 0.00001 |
| xAI: Grok 3 | x-ai ‚Ä¢ text->text | `x-ai/grok-3` | text->text | 131,072 | 0.000003 | 0.000015 |
| xAI: Grok 3 Beta | x-ai ‚Ä¢ text->text | `x-ai/grok-3-beta` | text->text | 131,072 | 0.000003 | 0.000015 |
| xAI: Grok 3 Mini | x-ai ‚Ä¢ text->text | `x-ai/grok-3-mini` | text->text | 131,072 | 0.0000003 | 0.0000005 |
| xAI: Grok 3 Mini Beta | x-ai ‚Ä¢ text->text | `x-ai/grok-3-mini-beta` | text->text | 131,072 | 0.0000003 | 0.0000005 |
| xAI: Grok 4 |  | `x-ai/grok-4` | text+image->text | 256,000 | 0.000003 | 0.000015 |
| xAI: Grok Vision Beta | x-ai ‚Ä¢ text+image->text | `x-ai/grok-vision-beta` | text+image->text | 8,192 | 0.000005 | 0.000015 |

### z-ai (4) {% #z-ai %}

| Model | Subtitle | ID | Modality | Context | Prompt $/1k | Completion $/1k |
| --- | --- | --- | --- | --- | --- | --- |
| Z.AI: GLM 4 32B  | z-ai ‚Ä¢ text->text | `z-ai/glm-4-32b` | text->text | 128,000 | 0.0000001 | 0.0000001 |
| Z.AI: GLM 4.5 | z-ai ‚Ä¢ text->text | `z-ai/glm-4.5` | text->text | 131,072 | 0.0000002 | 0.0000002 |
| Z.AI: GLM 4.5 Air | z-ai ‚Ä¢ text->text | `z-ai/glm-4.5-air` | text->text | 128,000 | 0.0000002 | 0.0000011 |
| Z.AI: GLM 4.5 Air (free) | z-ai ‚Ä¢ text->text | `z-ai/glm-4.5-air:free` | text->text | 131,072 | 0 | 0 |

## Methods
### The Nobox Schema
URL: https://docs.nobox.cloud/methods/overview
DESCRIPTION: How to Set up Nobox Schema

# {% $markdoc.frontmatter.title %}

To use Nobox to perform CRUD operations on records, you will need to define the schema for each type of record. For instance, for you to create or delete Users in an application, you will need to define the schema for `Users`.
## Schema Types

Nobox supports two types of schemas for structuring your data: 
   - Rowed Schema
   - Key-Value Schema. 
   
Each schema type offers different ways to organize and represent your data. Let's explore these schema types in more detail:

### Rowed Schema

Rowed Schema represents structured data in a row-based format. It is similar to a traditional table structure in a relational database, where each row represents an individual record. Here's an example of defining a Rowed Schema using Nobox:

> Note: Check [Nobox Integration Guide](/integrate-nobox) to see how the config file in the code was created

```typescript
import { Space } from "nobox-client";
import { createRowedSchema } from "../config";

interface User {
  id: string;
  name: string;
  age: number;
  email: string;
}

export const UserStructure: Space<User> = {
  space: "User",
  description: "A Rowed Schema for User records",
  structure: {
    id: {
      description: "User ID",
      type: String,
      required: true,
    },
    name: {
      description: "User's name",
      type: String,
      required: true,
    },
    age: {
      description: "User's age",
      type: Number,
      required: true,
    },
    email: {
      description: "User's email address",
      type: String,
      required: true,
    },
  },
};

export const UserModel = createRowedSchema<User>(UserStructure);
```

In this example, we define a User record with fields such as "id", "name", "age", and "email". Each field has a specified type and can be marked as required or optional based on your needs. Hold on! We still explain how to define the types and fields 

### Key-Value Schema
Key-Value Schema represents data as a collection of key-value pairs. It is similar to a dictionary or a JSON object structure, where the keys uniquely identify the values associated with them. Here's an example of defining a Key-Value Schema using Nobox:

```typescript
import { Space } from "nobox-client";
import { createKeyValueSchema } from "../config";

interface Settings {
  id: string;
  values: Record<string, any>;
}

export const SettingsStructure: Space<Settings> = {
  space: "Settings",
  description: "A Key-Value Schema for application settings",
  structure: {
    id: {
      description: "Settings ID",
      type: String,
      required: true,
    },
    values: {
      description: "Key-Value pairs representing settings",
      type: Object,
      required: true,
    },
  },
};

export const SettingsModel = createKeyValueSchema<Settings>(SettingsStructure);
```

In this example, we define a Settings record with a "values" field of type Object, which can hold various key-value pairs representing application settings.

These schema types provide flexibility in representing structured data in Nobox. Choose the schema type that best fits your data model and use case to create powerful and scalable applications with ease.

## Differences between Rowed and Key-value Schema
|                   | Rowed Schema                                                                                                                                                                                                                                                                                                            | Key-Value Schema                                                                                                                                                                                                                                                           |
|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Definition        | Represents structured data in a row-based format, similar to a traditional table structure in a relational database.                                                                                                                                                                                                    | Represents data as a collection of key-value pairs, similar to a dictionary or JSON object structure.                                                                                                                                                                      |
| Methods           | - `find`: Retrieves an array of records that match the specified parameters.                                                                                                                                                                             | - `setKeys`: Sets the key-value pairs for the specified space.                                                                                                                                                                                                               |
|                   | - `findOne`: Retrieves a single record that matches the specified parameters.                                                                                                                                                                           | - `getKeys`: Retrieves the key-value pairs for the specified space.                                                                                                                                                                                                           |
|                   | - `search`: Searches for records based on the provided search text in the specified searchable fields.                                                                                                                                                  |                                                                                                                                                                                                              |
|                   | - `insert`: Inserts an array of records into the specified space.                                                                                                                                                                                     |                                                                                                                                                                                                              |
| Data Structure    | Structured data organized in rows, where each row represents an individual record.                                                                                                                                                                                                                                     | Collection of key-value pairs where keys uniquely identify the associated values.                                                                                                                                                                                        |

## Next steps

- [Schema -  API Reference](/schema/api-reference)
- [File Upload](/methods/upload) - Learn how to upload files using Nobox
- [Search](/methods/search) - Learn how to search for records using text queries

### Types of Nobox Methods
URL: https://docs.nobox.cloud/methods/types
DESCRIPTION: API Reference for Type of Nobox Methods

# Types of Nobox Methods
There are two types of methods in Nobox NPM Client. 

{% side-by-side %}

{% item %}

## Rowed Models Methods
  This is the kind of methods generated from models created with `{type: "rowed"}` config on `getSchemaCreator` like we have below:

  ```ts
  import { getSchemaCreator } from 'nobox-client';

  const createRowedSchema = getSchemaCreator(config, {type: "rowed"})

  const UserModel = createSchema(UserStructure);
  ```

  The `UserModel` in the above example will only have access to  Rowed Schema Methods because it was created with `getSchemaCreator` and a config of `{type: "rowed"}`

  Note: When  second arugment (`{type: "rowed"}`) is not set, `getSchemaCreator` will still assume a default of `{type: rowed}`

### Available Rowed Models Methods
- find
- findOne
- search
- insert
- InsertOne
- UpdateOne
- UpdatedOneById
- getTokenOwner

**Note**: The `find` and `findOne` methods support population, allowing you to fetch related data from other record spaces in a single query. See [Population](/methods/populate) for detailed information.

{% /item %}

{% item %}

## Key Group Models Methods
  This is the kind of methods generated from models created with `{type: "key-group"}` config on `getSchemaCreator` like we have below:

  ```ts
  import { getSchemaCreator } from 'nobox-client';

  const createRowedSchema = getSchemaCreator(config, {type: "key-group"})

  const SettingsModel = createSchema(SettingsStructure);

  ```
  The `UserModel` in the above example will only have access to Key Group Methods because it was created with `getSchemaCreator` and a config of `{type: "key-group"}`

### Available Key Group Schema Methods
- setKeys
- getKeys

{% /item %}
{% /side-by-side %}

## Advanced Features

### Population Support

Rowed Schema methods (`find` and `findOne`) support population, which allows you to fetch related data from other record spaces in a single query. This is similar to SQL JOINs but with the flexibility of NoSQL.

**Example:**
```typescript
const postsWithAuthors = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
```

For comprehensive information about population, see [Population](/methods/populate).

### Model.find - Nobox API Reference
URL: https://docs.nobox.cloud/methods/find
DESCRIPTION: Explanation of how Nobox Model Methods "Find" works

# `model.find(query, options)`
The `model.find()` method in Nobox allows you to retrieve documents from a model based on a specified query and customize the returned results using options.

> **üí° Tip**: This method supports population to fetch related data from other record spaces. See the [Population Example](#example-with-population) below or visit [Population](/methods/populate) for detailed information.

## Parameters 

- `query`: An object that represents the search criteria. Each key in the object corresponds to a field in the model, and its value is used to match documents with matching field values. For example, `{ age: 10, gender: 'female' }` will return documents where the `age` field is 10 and the `gender` field is "female".

- `options`: An object that provides additional configuration for the query results. It includes the following properties:

  - `paramRelationship` (optional): Specifies the relationship between multiple search parameters. It can be set to `'Or'` or `'And'`. When set to `'Or'`, the query will return documents that match any of the provided search parameters. When set to `'And'`, the query will return documents that match all of the provided search parameters. If not specified, the default behavior is `'And'`.

  - `pagination` (optional): An object that enables pagination of the query results. It includes the following properties:

    - `limit` (required): The maximum number of records to be returned per page. For example, setting `limit` to 10 will return a maximum of 10 documents per page.

    - `page` (optional): The page number to retrieve. If not specified, the default is the first page. For example, setting `page` to 2 will retrieve the second page of results based on the specified `limit`.

  - `sort` (optional): An object that allows you to sort the query results based on a specific field. It includes the following properties:

    - `by` (required): The field to use for sorting. It should be one of the keys of the `ReturnObject<T>` type. For example, setting `by` to `'createdAt'` will sort the documents based on their creation date.

    - `order` (optional): The sort order for the results. It can be `'asc'` (ascending) or `'desc'` (descending). If not specified, the default is `'asc'`. For example, setting `order` to `'desc'` will sort the documents in descending order.

  - `populate` (optional): An array of population configurations to fetch related data from other record spaces. See [Population](/methods/populate) for detailed information.

With the `model.find()` method, you can efficiently retrieve documents that match specific criteria and control the pagination and sorting of the returned results. Adjust the query and options based on your model's fields and desired behavior.

## Return Value

- `Promise\<ReturnObject<T>[]>`: A promise that resolves to an array of objects representing the inserted documents. Each object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const params = {
  age: 25,
  role: 'admin',
};
const options = {
  paramRelationship: 'And',
  pagination: {
    limit: 10,
    page: 1,
  },
  sort: {
    by: 'name',
    order: 'asc',
  },
};
const results = await UserModel.find(params, options);
console.log(results);
```

## Example: With Population

```ts
const postsWithAuthors = await PostModel.find(
  { authorId: "user123" },
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
console.log(postsWithAuthors);
```

## Next steps

- [FindOne](/methods/find-one)
- [Search](/methods/search)

### Model.findOne() - Nobox API Reference
URL: https://docs.nobox.cloud/methods/find-one
DESCRIPTION: Explanation of how Nobox Model Methods "FindOne" works

# `model.findOne(query, options)`

The `model.findOne()` method in Nobox allows you to retrieve a single document from a model based on a specified query and customize the returned result using options.

> **üí° Tip**: This method supports population to fetch related data from other record spaces. See the [Population Example](#example-with-population) below or visit [Population](/methods/populate) for detailed information. 

## Parameters 

- `query`: An object that represents the search criteria. Each key in the object corresponds to a field in the model, and its value is used to match documents with matching field values. For example, `{ age: 25, role: 'admin' }` will return a document where the `age` field is 25 and the `role` field is "admin".

- `options`: An object that provides additional configuration for the query result. It includes the following properties:

  - `paramRelationship` (optional): Specifies the relationship between multiple search parameters. It can be set to `'Or'` or `'And'`. When set to `'Or'`, the query will return a document that matches any of the provided search parameters. When set to `'And'`, the query will return a document that matches all of the provided search parameters. If not specified, the default behavior is `'And'`.

  - `populate` (optional): An array of population configurations to fetch related data from other record spaces. See [Population](/methods/populate) for detailed information.

With the `model.findOne()` method, you can retrieve a single document that matches specific criteria. Adjust the query and options based on your model's fields and desired behavior.

## Return Value

- `Promise\<ReturnObject<T>>`: A promise that resolves to an objects representing the inserted documents. Each object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const params = {
  id: '123456789',
};
const options = {
  paramRelationship: 'And',
};
const result = await UserModel.findOne(params, options);
console.log(result);
```

## Example: With Population

```ts
const postWithDetails = await PostModel.findOne(
  { id: "post123" },
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      },
      {
        fields: {
          from: "category",
          localKey: "categoryId",
          foreignKey: "id",
          newField: "category"
        },
        space: "category"
      }
    ]
  }
);
console.log(postWithDetails);
```

## Next steps

- [Insert](/methods/insert)
- [Search](/methods/search)

### Model.search - Nobox API Reference
URL: https://docs.nobox.cloud/methods/search
DESCRIPTION: Explanation of how Nobox Model Method "search" works

# `model.search(params)`

The `model.search()` method in Nobox allows you to search for documents in a model based on specified search parameters and customize the returned results using options.

## Parameters
- `params` (object): An object that contains the search parameters. It includes the following properties:
  - `searchableFields` (array): An array of fields to be searched within the model.
  - `searchText` (string): The text to search for within the specified fields.

- `options`: An object that provides additional configuration for the query results. It includes the following properties:

> **Note**: The `search()` method does not support population. If you need to fetch related data, use the `find()` method instead.
  - `pagination` (optional): An object that enables pagination of the query results. It includes the following properties:

    - `limit` (required): The maximum number of records to be returned per page. For example, setting `limit` to 10 will return a maximum of 10 documents per page.

    - `page` (optional): The page number to retrieve. If not specified, the default is the first page. For example, setting `page` to 2 will retrieve the second page of results based on the specified `limit`.

  - `sort` (optional): An object that allows you to sort the query results based on a specific field. It includes the following properties:

    - `by` (required): The field to use for sorting. It should be one of the keys of the `ReturnObject<T>` type. For example, setting `by` to `'createdAt'` will sort the documents based on their creation date.

    - `order` (optional): The sort order for the results. It can be `'asc'` (ascending) or `'desc'` (descending). If not specified, the default is `'asc'`. For example, setting `order` to `'desc'` will sort the documents in descending order.

## Return Value

- `Promise<ReturnObject<T>>[]`: A promise that resolves to an object representing the search result. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const params = {
  searchableFields: ['name', 'description'],
  searchText: 'example',
};
const options = {
  pagination: {
    limit: 10,
    page: 1,
  },
  sort: {
    by: 'name',
    order: 'asc',
  },
};
const searchResult = await UserModel.search(params, options);
console.log(searchResult);
```

In the above example, we define the search parameters params with the fields to search (name and description) and the search text (example). We also provide options in the options object, specifying the paramRelationship as 'Or' and populating the author field from the AuthorModel to the authorName field in the search results. We call UserModel.search() with the params and options parameters and await the result. Finally, we log the search result to the console.

## Next steps
- [updateOne](/methods/updateOne)

### Model.insert - Nobox API Reference
URL: https://docs.nobox.cloud/methods/insert
DESCRIPTION: Explanation of how Nobox Model Method "insert" works

# `model.insert(body)`

The `model.insert()` method in Nobox allows you to insert multiple documents into a model. 

## Parameters
  - `body` (array): An array of objects representing the documents to be inserted. Each object should have the same structure as the model's schema.

## Return Value

- `Promise\<ReturnObject<T>[]>`: A promise that resolves to an array of objects representing the inserted documents. Each object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const documents = [
  { name: 'John', age: 25, role: 'user' },
  { name: 'Jane', age: 30, role: 'admin' },
];
const insertedDocuments = await UserModel.insert(documents);
console.log(insertedDocuments);
```

## Next steps

- [InsertOne](/methods/insert-one)
- [Search](/methods/search)

### Model.insertOne - Nobox API Reference
URL: https://docs.nobox.cloud/methods/insert-one
DESCRIPTION: Explanation of how Nobox Model Method "insertOne" works

# `model.insertOne(body)`

The `model.insertOne()` method in Nobox allows you to insert a single document into a model. 

## Parameters
  - `body` (object): An object representing the document to be inserted. It should have the same structure as the model's schema.

## Return Value

- `Promise\<ReturnObject<T>>`: A promise that resolves to an object representing the inserted document. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const document = { name: 'John', age: 25, role: 'user' };
const insertedDocument = await UserModel.insertOne(document);
console.log(insertedDocument);
```
In the above example, we define a document to be inserted into the UserModel. We then call UserModel.insertOne() with the document object as the body parameter. The method returns a promise that resolves to the inserted document. We log the inserted document to the console for verification.

## Next steps
- [Search](/methods/search)

### Model.updateOne - Nobox API Reference
URL: https://docs.nobox.cloud/methods/update-one
DESCRIPTION: Explanation of how Nobox Model Method "updateOne" works

# `model.updateOne(query, body, options)`

The `model.updateOne()` method in Nobox allows you to update a single document in a model based on specified parameters including

## Parameters
- `query` (object): An object that represents the search criteria. Each key in the object corresponds to a field in the model and an extra key called `id` for querying by id, and its value is used to match documents with matching field values.

- `body` (object): An object that contains the updated data for the document. The structure of this object should match the model's schema.

## Return Value

- `Promise\<ReturnObject<T>>`: A promise that resolves to an object representing the updated document. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const params = {
  id: '1234567890',
};
const body = {
  name: 'John Doe',
  age: 30,
};
const updatedDocument = await UserModel.updateOne(params, body);
console.log(updatedDocument);
```

## Next steps
- [updateOneById](/methods/update-one-by-id)
- [Search](/methods/search)

### Model.updateOneById - Nobox API Reference
URL: https://docs.nobox.cloud/methods/update-one-by-id
DESCRIPTION: Explanation of how Nobox Model Method "updateOneById" works

# `model.updateOneById(id, body)`

The `model.updateOneById()` method in Nobox allows you to update a single document in a model based on the document's ID and with the provided data in the `body` object.

## Parameters
- `id` (string): The ID of the document to be updated.

- `body` (object): An object that contains the updated data for the document. The structure of this object should match the model's schema.

## Return Value

- `Promise\<ReturnObject<T>>`: A promise that resolves to an object representing the updated document. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const id = '1234567890';
const body = {
  name: 'John Doe',
  age: 30,
};
const updatedDocument = await UserModel.updateOneById(id, body);
console.log(updatedDocument);
```

## Next steps
- [GetTokenOwner](/methods/get-token-owner)
- [Search](/methods/search)

### Model.deleteOneById - Nobox API Reference
URL: https://docs.nobox.cloud/methods/delete-one-by-id
DESCRIPTION: Explanation of how Nobox Model Method "deleteOneById" works

# `model.deleteOneById(id)`

The `model.deleteOneById()` method in Nobox allows you to delete a single document in a model based on the document's ID.

## Parameters
- `id` (string): The ID of the document to be deleted.

## Return Value
- `Promise\<ReturnObject<T>>`: A promise that resolves to an object representing the deleted document. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const id = '1234567890';
const deletedDocument = await UserModel.deleteOneById(id);
console.log(deletedDocument);
```

## Next steps
- [Search](/methods/search)

### Population - Nobox API Reference
URL: https://docs.nobox.cloud/methods/populate
DESCRIPTION: Explanation of how Nobox Population works to fetch related data

# Population

Population in Nobox allows you to fetch related data from other record spaces in a single query, similar to SQL JOINs but with the flexibility of NoSQL. This feature enables you to create rich, relational-like data structures without the complexity of traditional database joins.

## Overview

Population works by defining relationships between record spaces using field mappings. When you perform a `find()` or `findOne()` operation, you can specify population options to automatically fetch related data and include it in your results.

## Population Structure

The population is defined in the `options` parameter using the `populate` property:

```typescript
export type Options<T extends CObject> = {
  populate?: {
    fields: {
      from: string;        // Source space name
      foreignKey: string;  // Field in source space to match
      localKey: string;    // Field in current record to match against
      newField: string;    // New field name to add populated data
    };
    space: string;         // Target space name
  }[];
};
```

## Parameters

### `populate` Array
An array of population configurations, each containing:

- **`fields.from`** (string): The name of the source record space to fetch data from. This is the `space` property from your schema definition (e.g., "user", "category", "profile")
- **`fields.foreignKey`** (string): The field name in the source space to match against
- **`fields.localKey`** (string): The field name in the current record to match with the foreign key
- **`fields.newField`** (string): The name of the new field that will contain the populated data
- **`fields.multi`** (boolean, optional): When `true`, returns an array of related records. When `false` or omitted, returns a single record. Defaults to `false`.
- **`space`** (string): The target space name (usually same as `from`). This should match the `space` property from your schema definition

## Where Do the Values Come From?

The `from` and `space` values come from the `space` property in your schema definitions. Here's how to find them:

### Schema Definitions
```typescript
export const UserStructure: Space<User> = {
  space: "user",           // ‚Üê This is your "from" value
  description: "User records",
  structure: { /* ... */ }
};
export const ProfileStructure: Space<Profile> = {
  space: "profile",        // ‚Üê This is your "from" value
  description: "User profiles",
  structure: { /* ... */ }
};
export const CategoryStructure: Space<Category> = {
  space: "category",       // ‚Üê This is your "from" value
  description: "Post categories", 
  structure: { /* ... */ }
};
```

### Using in Population
```typescript
const postsWithDetails = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",        // ‚Üê From UserStructure.space
          localKey: "authorId",
          foreignKey: "id", 
          newField: "author"
        },
        space: "user"          // ‚Üê Same as "from"
      },
      {
        fields: {
          from: "category",    // ‚Üê From CategoryStructure.space
          localKey: "categoryId",
          foreignKey: "id",
          newField: "category"
        },
        space: "category"      // ‚Üê Same as "from"
      }
    ]
  }
);
```

## Relationship Types

### One-to-One Relationship
When each record in the current space has at most one related record in the source space.

```typescript
{
  fields: {
    from: "profile",        // ‚Üê From ProfileStructure.space
    localKey: "id",         // User.id
    foreignKey: "userId",   // Profile.userId
    newField: "profile"     // Result: user.profile
  },
  space: "profile"          // ‚Üê Same as "from"
}
```

### Many-to-One Relationship
When multiple records in the current space can relate to the same record in the source space.

```typescript
{
  fields: {
    from: "user",
    localKey: "authorId",      // Post.authorId
    foreignKey: "id",          // User.id
    newField: "author"         // Result: post.author
  },
  space: "user"
}
```

## Examples

### Example 1: Basic Population

```typescript
interface Post {
  id: string;
  title: string;
  content: string;
  authorId: string;
}

interface User {
  id: string;
  name: string;
  email: string;
}
const postsWithAuthors = await PostModel.find(
  { authorId: "user123" },
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
```

### Example 2: Multiple Population Fields

```typescript
const postsWithDetails = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      },
      {
        fields: {
          from: "category",
          localKey: "categoryId",
          foreignKey: "id",
          newField: "category"
        },
        space: "category"
      }
    ]
  }
);
```

### Example 3: One-to-Many Population

```typescript
const usersWithPosts = await UserModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "post",
          localKey: "id",
          foreignKey: "authorId",
          newField: "posts",
          multi: true  // ‚Üê Returns array of posts
        },
        space: "post"
      }
    ]
  }
);
```

### Example 4: Real-World Use Case

Based on a practical blog system implementation:

```typescript
interface Post {
  id: string;
  title: string;
  content: string;
  authorId: string;
  categoryId: string;
  publishedAt: string;
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar: string;
}

interface Category {
  id: string;
  name: string;
  description: string;
}
const getPostsWithDetails = async (userId?: string) => {
  const posts = await PostModel.find(
    userId ? { authorId: userId } : {},
    {
      populate: [
        {
          fields: {
            from: "user",
            localKey: "authorId",
            foreignKey: "id",
            newField: "author"
          },
          space: "user"
        },
        {
          fields: {
            from: "category",
            localKey: "categoryId",
            foreignKey: "id",
            newField: "category"
          },
          space: "category"
        }
      ]
    }
  );

  return posts.map((post: any) => ({
    ...post,
    authorName: post.author?.name,
    authorEmail: post.author?.email,
    categoryName: post.category?.name
  }));
};
```

## Best Practices

### 1. **Field Naming**
- Use descriptive names for `newField` to clearly indicate the relationship
- Consider using camelCase for consistency with JavaScript conventions

### 2. **Performance Considerations**
- Population adds complexity to queries, so use it judiciously
- Consider the number of related records that will be fetched
- For large datasets, consider pagination

### 3. **Type Safety**
- Define interfaces for populated data to maintain type safety
- Use TypeScript interfaces to describe the expected structure

```typescript
interface PostWithAuthor extends Post {
  author?: User;
  category?: Category;
}
```

### 4. **Error Handling**
- Handle cases where related data might not exist
- Use optional chaining when accessing populated fields

```typescript
const authorEmail = post.author?.email || 'No email available';
```

## Method Support

Population is supported by the following methods:
- ‚úÖ **`find()`**: Full population support
- ‚úÖ **`findOne()`**: Full population support
- ‚ùå **`search()`**: Population not supported
- ‚ùå **`insert()`**: Population not supported
- ‚ùå **`insertOne()`**: Population not supported
- ‚ùå **`updateOne()`**: Population not supported
- ‚ùå **`updateOneById()`**: Population not supported
- ‚ùå **`deleteOneById()`**: Population not supported

## Limitations

1. **Single Query**: Population happens in a single query, so all related data is fetched at once
2. **No Nested Population**: Currently, you cannot populate data from already populated fields
3. **No Aggregation**: Population is for fetching related records, not for aggregating data
4. **Limited Method Support**: Only `find()` and `findOne()` methods support population

## Quick Reference

### Finding Space Names
```typescript
export const UserStructure: Space<User> = {
  space: "user",           // ‚Üê Use this as "from" and "space"
};

export const CategoryStructure: Space<Category> = {
  space: "category",       // ‚Üê Use this as "from" and "space"
};
```

### Population Template
```typescript
{
  fields: {
    from: "SPACE_NAME",    // ‚Üê From your schema.space
    localKey: "FIELD_IN_CURRENT_RECORD",
    foreignKey: "FIELD_IN_SOURCE_RECORD", 
    newField: "NEW_FIELD_NAME",
    multi: false           // ‚Üê true for arrays, false for single record
  },
  space: "SPACE_NAME"      // ‚Üê Same as "from"
}
```

## Next Steps

- [Find Method](/methods/find)
- [FindOne Method](/methods/find-one)
- [Search Method](/methods/search)
- [Schema Overview](/schema/overview)

### File Upload - Nobox API Reference
URL: https://docs.nobox.cloud/methods/upload
DESCRIPTION: Upload files to Nobox cloud storage using the direct API endpoint with authentication and progress tracking

# File Upload

The Nobox file upload system allows you to upload files directly to cloud storage (AWS S3) and manage them through the Nobox API. This feature is part of the Nobox backend-as-a-service platform and provides secure, scalable file storage with automatic metadata management.

## Prerequisites

Before using the file upload feature, ensure you have:

- A Nobox account and project created
- Your API token (NOBOX_TOKEN) from your Nobox dashboard
- Your project slug (projectSlug) from your Nobox dashboard
- A file to upload (supports all common file types)

## Examples

### Basic File Upload

```ts
import axios from 'axios';
const NOBOX_TOKEN = 'your-api-token-from-dashboard';
const projectSlug = 'your-project-slug';
const UPLOAD_URL = `https://api.nobox.cloud/_f_/${projectSlug}/upload`;
const formData = new FormData();
formData.append('file', file); // file is a File object from input or drag-drop
const response = await axios.post(UPLOAD_URL, formData, {
    headers: {
        'Content-Type': 'multipart/form-data',
        'Authorization': `Bearer ${NOBOX_TOKEN}`,
    },
});
const uploadedFile = response.data;
console.log('Upload successful:', uploadedFile);
```

### File Upload with Progress Tracking

```ts
const response = await axios.post(UPLOAD_URL, formData, {
    headers: {
        'Content-Type': 'multipart/form-data',
        'Authorization': `Bearer ${NOBOX_TOKEN}`,
    },
    onUploadProgress: (progressEvent) => {
        const percent = Math.floor(
            (progressEvent.loaded * 100) / progressEvent.total
        );
        console.log(`Upload progress: ${percent}%`);
    },
});
```

### Error Handling

```ts
try {
    const response = await axios.post(UPLOAD_URL, formData, {
        headers: {
            'Content-Type': 'multipart/form-data',
            'Authorization': `Bearer ${NOBOX_TOKEN}`,
        },
    });
    
    const uploadedFile = response.data;
    console.log('Upload successful:', uploadedFile);
} catch (error) {
    if (error.response?.status === 401) {
        console.error('Authentication failed - check your API token');
    } else if (error.response?.status === 413) {
        console.error('File too large - check file size limits');
    } else if (error.response?.status === 400) {
        console.error('Invalid request - check file format and request structure');
    } else {
        console.error('Upload failed:', error.message);
    }
}
```

## Endpoint

**POST** `https://api.nobox.cloud/_f_/{projectSlug}/upload`

**Base URL**: `https://api.nobox.cloud/_f_/`  
**Path Parameter**: `{projectSlug}` - Your Nobox project slug  
**Method**: POST  
**Content Type**: multipart/form-data

## Authentication

All file upload requests require authentication using your Nobox API token:

```
Authorization: Bearer {NOBOX_TOKEN}
```

**Token Location**: Available on the Access Tokens page in your Nobox dashboard  
**Token Format**: Bearer token authentication  
**Security**: HTTPS required for all requests

## Request Structure

### Headers

```
Content-Type: multipart/form-data
Authorization: Bearer {NOBOX_TOKEN}
```

### Body (FormData)

- `file` (File): The file to be uploaded. This should be sent as part of a FormData object.

**File Requirements**:
- Supported formats: All common file types

## Response Structure

### Success Response

**Status Code**: 200 OK  
**Content Type**: application/json

```typescript
interface CloudFile {
    _id: string;           // Unique file identifier (UUID)
    name: string;          // Generated filename with unique ID
    originalName: string;  // Original filename as uploaded
    ownedBy: string;       // User ID who uploaded the file
    s3Link: string;        // Direct link to the file in S3
    updatedAt: string;     // Last update timestamp (ISO 8601)
    createdAt: string;     // Creation timestamp (ISO 8601)
}
```

### Error Responses

**401 Unauthorized**: Invalid or missing API token  
**413 Payload Too Large**: File exceeds size limit  
**400 Bad Request**: Invalid file or malformed request  
**500 Internal Server Error**: Server processing error

## Troubleshooting

### Common Issues

**401 Unauthorized Error**
- Verify your API token is correct
- Ensure the token is included in the Authorization header
- Check that your token hasn't expired

**413 Payload Too Large**
- Check file size (limit is typically 100MB)
- Compress large files before upload
- Consider chunked upload for very large files

**400 Bad Request**
- Ensure file is properly added to FormData
- Check that Content-Type header is set correctly
- Verify file is not corrupted

**Network Errors**
- Check internet connection
- Verify endpoint URL is correct
- Ensure HTTPS is used for all requests

### Best Practices

1. **File Validation**: Always validate file type and size before upload
2. **Error Handling**: Implement comprehensive error handling for all upload scenarios
3. **Progress Tracking**: Use progress tracking for better user experience
4. **Security**: Never expose API tokens in client-side code for production
5. **Retry Logic**: Implement retry logic for network failures
6. **File Naming**: Consider sanitizing filenames for security

## Related Documentation

- [Integration Guide](/integrate-nobox) - Learn how to integrate Nobox into your application

## Next Steps

- [Find](/methods/find) - Query uploaded files and metadata
- [Search](/methods/search) - Search through uploaded files and metadata
- [InsertOne](/methods/insert-one) - Store file references in your database

### Model.getKeys - Nobox API Reference
URL: https://docs.nobox.cloud/methods/get-keys
DESCRIPTION: Explanation of how Nobox Model Method "getKeys" works

# `model.getKeys()`

The `model.getKeys()` method in Nobox allows you to retrieve the key values stored in a key-group model.

## Return Value

- `Promise<Array<ReturnObject<T>>>`: A promise that resolves to an array of objects representing the key values. Each object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const keys = await KeyGroupModel.getKeys();
console.log(keys);
```

The model.getKeys() method retrieves all the key values stored in a key-group model. It returns an array of objects representing the key values. Each object in the array has the same structure as the model's schema, including additional fields such as id, createdAt, and updatedAt. Use this method to fetch the key values and utilize them in your application as needed.

## Next steps

- [SetKeys](/methods/set-keys)
- [Search](/methods/search)

### Model.setKeys - Nobox API Reference
URL: https://docs.nobox.cloud/methods/set-keys
DESCRIPTION: Explanation of how Nobox Model Method "setKeys" works

# `model.setKeys(body)`

The `model.setKeys()` method in Nobox allows you to set key-value pairs in the key-group model.

## Parameters
- `body` (object): An object representing the key-value pairs to be set in the key-group model. Each key-value pair should correspond to a field and its value in the model's schema.

## Return Value

- `Promise\<ReturnObject<T>[]>`: A promise that resolves to an array of objects representing the updated key-value pairs. Each object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const keyValues = {
  key1: 'value1',
  key2: 'value2',
};
const updatedKeys = await KeyGroupModel.setKeys(keyValues);
console.log(updatedKeys);

```

## Next steps

- [GetKeys](/methods/get-keys)
- [Search](/methods/search)

### Model.getTokenOwner - Nobox API Reference
URL: https://docs.nobox.cloud/methods/get-token-owner
DESCRIPTION: Explanation of how Nobox Model Method "getTokenOwner" works

# `model.getTokenOwner(token)`

The `model.getTokenOwner()` method in Nobox allows you to retrieve the owner of a token associated with a model.

Note: This token should be the token returned by `Nobox.login`, and the model used here should be the model used for creating `Nobox.login`

## Parameters
- `token` (string): The token for which you want to retrieve the owner.

## Return Value

- `Promise\<ReturnObject<T>>`: A promise that resolves to an object representing the owner of the token. The object will have the same structure as the model's schema, including additional fields such as `id`, `createdAt`, and `updatedAt`.

## Example: Basic Usage

```ts
const token = 'abcdef123456';
const tokenOwner = await UserModel.getTokenOwner(token);
console.log(tokenOwner);
```
In the above example, we define the token for which we want to retrieve the owner. We call UserModel.getTokenOwner() with the token parameter and await the result. Finally, we log the token owner to the console.

## Next steps

- [SetKeys](/methods/set-keys)
- [Search](/methods/search)

## Schema
### The Nobox Schema
URL: https://docs.nobox.cloud/schema/overview
DESCRIPTION: How to Set up Nobox Schema

# {% $markdoc.frontmatter.title %}

To perform CRUD operations on records using Nobox, you will need to define the schema for each type of record. For instance, for you to create or delete Users in an application, you will need to define the schema for `Users`.

## Schema Types

Nobox supports two types of schemas for structuring your data: 
   - Rowed Schema
   - Key-Value Schema.
   
Each schema type offers different ways to organize and represent your data. Let's explore these schema types in more detail:

### Rowed Schema

Rowed Schema represents structured data in a row-based format. It is similar to a traditional table structure in a relational database, where each row represents an individual record. Here's an example of defining a Rowed Schema using Nobox:

> Note: Check [Nobox Integration Guide](/integrate-nobox) to see how the config file in the code was created

```typescript
import { Space } from "nobox-client";
import { createRowedSchema } from "../config";

interface User {
  id: string;
  name: string;
  age: number;
  email: string;
}

export const UserStructure: Space<User> = {
  space: "User",
  description: "A Rowed Schema for User records",
  structure: {
    id: {
      description: "User ID",
      type: String,
      required: true,
    },
    name: {
      description: "User's name",
      type: String,
      required: true,
    },
    age: {
      description: "User's age",
      type: Number,
      required: true,
    },
    email: {
      description: "User's email address",
      type: String,
      required: true,
    },
  },
};

export const UserModel = createRowedSchema<User>(UserStructure);
```

In this example, we define a User record with fields such as "id", "name", "age", and "email". Each field has a specified type and can be marked as required or optional based on your needs.

### Advanced Features

Rowed Schema also supports population, allowing you to fetch related data from other record spaces in a single query. This enables you to create rich, relational-like data structures without the complexity of traditional database joins.

**Example:**
```typescript
const postsWithAuthors = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
```

For detailed information about population, see [Population](/methods/populate). 

### Key-Value Schema
Key-Value Schema represents data as a collection of key-value pairs. It is similar to a dictionary or a JSON object structure, where the keys uniquely identify the values associated with them. Here's an example of defining a Key-Value Schema using Nobox:

```typescript
import { Space } from "nobox-client";
import { createKeyValueSchema } from "../config";

interface Settings {
  id: string;
  values: Record<string, any>;
}

export const SettingsStructure: Space<Settings> = {
  space: "Settings",
  description: "A Key-Value Schema for application settings",
  structure: {
    id: {
      description: "Settings ID",
      type: String,
      required: true,
    },
    values: {
      description: "Key-Value pairs representing settings",
      type: Object,
      required: true,
    },
  },
};

export const SettingsModel = createKeyValueSchema<Settings>(SettingsStructure);
```

In this example, we define a Settings record with a "values" field of type Object, which can hold various key-value pairs representing application settings.

These schema types provide flexibility in representing structured data in Nobox. Choose the schema type that best fits your data model and use case to create powerful and scalable applications with ease.

## Differences between Rowed and Key-value Schema
|                   | Rowed Schema                                                                                                                                                                                                                                                                                                            | Key-Value Schema                                                                                                                                                                                                                                                           |
|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Definition        | Represents structured data in a row-based format, similar to a traditional table structure in a relational database.                                                                                                                                                                                                    | Represents data as a collection of key-value pairs, similar to a dictionary or JSON object structure.                                                                                                                                                                      |
| Methods           | - `find`: Retrieves an array of records that match the specified parameters.                                                                                                                                                                             | - `setKeys`: Sets the key-value pairs for the specified space.                                                                                                                                                                                                               |
|                   | - `findOne`: Retrieves a single record that matches the specified parameters.                                                                                                                                                                           | - `getKeys`: Retrieves the key-value pairs for the specified space.                                                                                                                                                                                                           |
|                   | - `search`: Searches for records based on the provided search text in the specified searchable fields.                                                                                                                                                  |                                                                                                                                                                                                              |
|                   | - `insert`: Inserts an array of records into the specified space.                                                                                                                                                                                     |                                                                                                                                                                                                              |
| Data Structure    | Structured data organized in rows, where each row represents an individual record.                                                                                                                                                                                                                                     | Collection of key-value pairs where keys uniquely identify the associated values.                                                                                                                                                                                        |

## Next steps

- [Schema -  API Reference](/schema/api-reference)
- [Population Guide](/schema/population-guide)

### Schema Creation Concepts
URL: https://docs.nobox.cloud/schema/concepts
DESCRIPTION: Some Concepts on Nobox Schema

# {% $markdoc.frontmatter.title %}

## Required Fields and Default Values
Fields in a schema can be marked as required or optional. Required fields must have a value assigned to them when creating or updating records. Optional fields, on the other hand, can be left empty if needed.

You can specify the required flag for each field in the schema definition. For example:

```ts
age: {
  description: "User's age",
  type: Number,
  required: true,
}
```

Additionally, you can define default values for fields using the default property. The default value will be assigned to the field if no explicit value is provided during record creation. Here's an example:
```ts
age: {
  description: "User's age",
  type: Number,
  defaultValue: 18,
},

```

## Hashing Fields
Nobox allows you to apply hashing to any field within your schema. Hashing sensitive data adds an extra layer of security by transforming the data into a fixed-size hash value that is non-reversible.

To hash a field in Nobox, you can use the `hashed: true` option in the field definition within the schema. This option instructs Nobox to automatically hash the field value before storing it in the database.

Here's an example:
```ts
age: {
  description: "User's Password",
  type: Number,
  defaultValue: 18,
}
```

### Benefits of Field Hashing
Hashing sensitive fields in your Nobox schema offers several benefits:
- Data Security: Hashing transforms sensitive data into a non-reversible format, making it more secure. Even if the database is compromised, the original data remains protected.
- Privacy Protection: By hashing sensitive fields, you ensure that the actual values are not easily accessible to unauthorized individuals or even administrators with database access.
- Data Integrity: Hashing allows you to verify the integrity of the data. If the hashed value matches the stored hash, it indicates that the field value has not been tampered with.

### Note on Querying
When using a hashed field in your schema, it's important to note that the hashed value will be stored and used for querying purposes. This means you can still query with your hashed field. However, when records are returned through any of the Rowed Schema methods, the hashed field value will not be included. This ensures that the hashed value remains protected and secure.

## Next steps

- [Creating Schemas](/schema/concepts)

### Example Usage - Rowed Schema vs Key-Value Schema
URL: https://docs.nobox.cloud/schema/example-usage
DESCRIPTION: Examples on how to setup rowed and key group schemas in Nobox

# {% $markdoc.frontmatter.title %}
In this example, we'll demonstrate the usage of Nobox with both Rowed Schema and Key-Value Schema, emphasizing their differences in data structure and available methods.

### Rowed Schema Example
Rowed Schema represents structured data in a row-based format, similar to a traditional table structure in a relational database. Let's create a simple "User" record using Rowed Schema.

#### Step 1: Define the Rowed Schema
First, define the Rowed Schema for the "User" record:

```ts
import { Space } from "nobox-client";
import { createRowedSchema } from "../config";

interface User {
  id: string;
  name: string;
  age: number;
  email: string;
}

export const UserStructure: Space<User> = {
  space: "User",
  description: "A Rowed Schema for User records",
  structure: {
    id: {
      description: "User ID",
      type: String,
      required: true,
    },
    name: {
      description: "User's name",
      type: String,
      required: true,
    },
    age: {
      description: "User's age",
      type: Number,
      required: true,
    },
    email: {
      description: "User's email address",
      type: String,
      required: true,
    },
  },
};

export const UserModel = createSchema<User>(UserStructure);
```
#### Step 2: Perform Operations with Rowed Schema
Now, let's perform some operations using the Rowed Schema:

```ts
const allUsers = await UserModel.find();
console.log("All Users:", allUsers);
const newUser = {
  id: "1",
  name: "John Doe",
  age: 30,
  email: "johndoe@example.com",
};
const insertedUser = await UserModel.insertOne(newUser);
console.log("Inserted User:", insertedUser);
const updatedUser = await UserModel.updateOneById("1", { age: 31 });
console.log("Updated User:", updatedUser);
```
With Rowed Schema, data is structured in rows, and we can perform operations like finding all users, inserting new users, and updating existing users by their ID.

### Advanced Rowed Schema with Population

Rowed Schema also supports population to fetch related data from other record spaces:

```ts
interface Post {
  id: string;
  title: string;
  content: string;
  authorId: string; // Foreign key to User
  categoryId: string; // Foreign key to Category
}

interface User {
  id: string;
  name: string;
  email: string;
}

interface Category {
  id: string;
  name: string;
  description: string;
}
const postsWithDetails = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      },
      {
        fields: {
          from: "category",
          localKey: "categoryId",
          foreignKey: "id",
          newField: "category"
        },
        space: "category"
      }
    ]
  }
);
console.log(postsWithDetails);
```

### Key-Value Schema Example
Key-Value Schema represents data as a collection of key-value pairs, similar to a dictionary or JSON object structure. Let's create a simple "Settings" record using Key-Value Schema.

#### Step 1: Define the Key-Value Schema
First, define the Key-Value Schema for the "Settings" record:

```ts
import { Space } from "nobox-client";
import { createSchema } from "../config";

interface Settings {
  id: string;
  values: Record<string, any>;
}

export const SettingsStructure: Space<Settings> = {
  space: "Settings",
  description: "A Key-Value Schema for application settings",
  structure: {
    id: {
      description: "Settings ID",
      type: String,
      required: true,
    },
    values: {
      description: "Key-Value pairs representing settings",
      type: Object,
      required: true,
    },
  },
};

export const SettingsModel = createSchema<Settings>(SettingsStructure);
```

#### Step 2: Perform Operations with Key-Value Schema
Now, let's perform some operations using the Key-Value Schema:

```ts
const settingsData = {
  id: "1",
  values: {
    theme: "dark",
    notifications: true,
  },
};
const updatedSettings = await SettingsModel.setKeys(settingsData);
console.log("Updated Settings:", updatedSettings);
const allSettings = await SettingsModel.getKeys();
console.log("All Settings:", allSettings);
```

With Key-Value Schema, we can set key-value pairs for settings and retrieve all key-value pairs associated with the settings.

### Important Note: Interface Definition Best Practices

When defining interfaces for your record structures, **do not include** `id`, `createdAt`, and `updatedAt` fields in your interface definition. These fields are automatically added by Nobox and are always returned with every record.

**‚ùå Incorrect:**
```ts
interface User {
  id: string;           // Don't include these
  name: string;
  age: number;
  email: string;
  createdAt: string;    // Don't include these
  updatedAt: string;    // Don't include these
}
```

**‚úÖ Correct:**
```ts
import { ReturnObject } from "nobox-client";

interface User {
  name: string;
  age: number;
  email: string;
}
const user: ReturnObject<User> = await UserModel.findOne({ email: "john@example.com" });
```

The `ReturnObject<T>` type automatically extends your interface with the required fields:
```ts
type ReturnObject<T> = T & {
  id: string;
  createdAt: string;
  updatedAt: string;
};
```

## Next steps

- [Interface Guidelines](/schema/interface-guidelines)
- [Population Guide](/schema/population-guide)
- [Population API Reference](/methods/populate)

### Interface Definition Guidelines
URL: https://docs.nobox.cloud/schema/interface-guidelines
DESCRIPTION: Best practices for creating TypeScript interfaces in Nobox

# Interface Definition Guidelines

When creating TypeScript interfaces for your Nobox record structures, follow these best practices to ensure clean, maintainable code.

## ‚ùå Don't Include These Fields

The following fields are automatically managed by Nobox and should **never** be included in your interface definitions:

- `id` - Automatically generated by Nobox
- `createdAt` - Automatically set by Nobox
- `updatedAt` - Automatically updated by Nobox

## ‚úÖ Correct Interface Definition

```typescript
import { ReturnObject } from "nobox-client";

interface User {
  name: string;
  age: number;
  email: string;
}
```

## Using ReturnObject for Type Safety

When working with return types from Nobox operations, use the `ReturnObject<T>` type:

```typescript
const user: ReturnObject<User> = await getUser(id);
```

## Complete Example

```typescript
import { Space, ReturnObject } from "nobox-client";
import { createRowSchema } from "../config";
interface Tweet {
  content: string;
  authorId: string;
  media: string[];
  likesCount: number;
}
export const TweetStructure: Space<Tweet> = {
  space: "tweet",
  description: "Twitter clone tweet records",
  structure: {
    content: {
      description: "Tweet content text",
      type: String,
      required: true,
    },
    authorId: {
      description: "ID of the tweet author",
      type: String,
      required: true,
    },
    media: {
      description: "Array of media URLs",
      type: Array,
      required: false,
      defaultValue: [],
    },
    likesCount: {
      description: "Number of likes",
      type: Number,
      required: false,
      defaultValue: 0,
    },
  },
};

export const TweetModel = createRowSchema<Tweet>(TweetStructure);
const tweet: ReturnObject<Tweet> = await TweetModel.findOne({ id: "123" });
```

## Why This Matters

1. **Clean Interfaces**: Focus on business data, not system fields
2. **Type Safety**: ReturnObject<T> ensures proper typing
3. **Consistency**: Follows Nobox conventions
4. **Maintainability**: Easier to understand and modify
5. **Prevents Confusion**: Clear separation between user data and system data

## Next Steps

- [Schema Examples](/schema/example-usage)
- [Population Guide](/schema/population-guide)
- [API Reference](/schema/api-reference)

### Schema - API Reference
URL: https://docs.nobox.cloud/schema/api-reference
DESCRIPTION: API Reference for Schema

# {% $markdoc.frontmatter.title %}

## Schema Structure
Here are the available options you can include in your schema structure:

- `space` (string): The name of the schema space. It represents the logical grouping or category of your data.
- `description` (string): A description of the schema, providing additional information about its purpose or usage.
- `structure` (object or Type Constructor): An object that defines the properties for your fields or a type constructor that determines the type of your field
- `initialData`: This is a array of objects you can add to your schema to serve as the initial ( seed) data for that record space. On first call , your record space will have this initial data

For Example:

```ts

const userSchema: Space<User> = {
  space: "User",
  description: "Schema for User records",
  initialData: [
    {
      name: "akin",
      age: 20,
      email "akin@gmail.com"
    },
    {
      name: "Dave",
      age: 30,
      email: "dave@yahoo.com"
    }
  ],
  structure: {
    name: String,
    age: Number,
    email: {
      type: String,
      required: true,
      description: "User's email address",
    },
  },
};

```

## Structure

There are two ways to define the structure of a schema, you can specify the field property with an Object value or a type constructor. Here are examples explaining the concept below:

{% side-by-side %}

{% item %}

### Example: Using Object Value

{% markdoc-example %}

```ts
const userSchema: Space<User> = {
  space: "User",
  description: "Schema for User records",
  structure: {
    id: {
      type: String,
      required: true,
      description: "User ID",
    },
    name: {
      type: String,
      required: true,
      description: "User's name",
    },
    age: {
      type: Number,
      required: true,
      description: "User's age",
    },
    email: {
      type: String,
      required: true,
      description: "User's email address",
    },
  },
};
```

{% /markdoc-example %}

When using the object value: Here are the available configuration options for each property:

- `type` (string or constructor): The data type of the property. Below are the data types allowed.
    - `String`: Represents textual data.
    - `Number`: Represents numeric data.
    - `Boolean`: Represents a boolean value (true or false).
    - `Array`: Represents an array of values. You can choose the appropriate data type based on the nature of your data and the operations you intend to perform.
- `required` (boolean): Indicates whether the property is required or optional.
- `defaultValue` (any): Specifies a default value for the property if no value is provided.
- `hashed` (boolean): Indicates whether the property value should be hashed for secure storage, such as passwords or sensitive data.
- `comment` (string): A comment or additional information about the property.

{% /item %}

{% item %}

### Example: Using Type Constructors

{% markdoc-example %}

```ts
const userSchema: Space<User> = {
  space: "User",
  description: "Schema for User records",
  structure: {
    id: String,
    name: String,
    age: Number,
    email: {
      type: String,
      required: true,
      description: "User's email address",
    },
  },
};
```

{% /markdoc-example %}

When using the type constructor: Here are the available types for each property, same as the `type` field in the Object Configuration above:
- `String`: Represents textual data.
- `Number`: Represents numeric data.
- `Boolean`: Represents a boolean value (true or false).
- `Array`: Represents an array of values. You can choose the appropriate data type based on the nature of your data and the operations you intend to perform.

**Note**: When type constructor is being used instead of the Object configuration, the other configuration fields are assumed with the following defaults:
- `required`: false,
-  `description`: empty string
-  `required`: empty string
-  `defaultValue`: undefined
- `hashed`: false
- `comment`: undefined

{% /markdoc-example %}

{% /item %}

{% /side-by-side %}

### Example: Using Both Object Value and Type Constructors

```ts
const userSchema: Space<User> = {
  space: "User",
  description: "Schema for User records",
  structure: {
    id: String,
    name: String,
    age: Number,
    email: String,
  },
};
```

## Next steps

- [Schema Example Usage](/schema/example-usage)

### Population Guide - Best Practices
URL: https://docs.nobox.cloud/schema/population-guide
DESCRIPTION: A comprehensive guide to using population in Nobox

# Population Guide

This guide provides best practices and advanced techniques for using population in Nobox.

## Understanding Relationships

### Where Do Space Names Come From?
The `from` and `space` values in population come from the `space` property in your schema definitions:

```typescript
export const UserStructure: Space<User> = {
  space: "user",           // ‚Üê Use this as "from" and "space"
};

export const CategoryStructure: Space<Category> = {
  space: "category",       // ‚Üê Use this as "from" and "space"  
};
```

### One-to-One Relationships
- Each record in the current space has at most one related record
- Example: User ‚Üí Profile

### Many-to-One Relationships  
- Multiple records can relate to the same record
- Example: Post ‚Üí User (many posts, one user)

### One-to-Many Relationships
- One record relates to multiple records
- Use with `multi: true` option

```typescript
{
  fields: {
    from: "post",
    localKey: "id",         // User.id
    foreignKey: "authorId", // Post.authorId
    newField: "posts",
    multi: true             // ‚Üê Returns array of posts
  },
  space: "post"
}
```

## Advanced Patterns

### Conditional Population
```typescript

const posts = await PostModel.find(
  { published: true },
  {
    populate: [
      {
        fields: {
          from: "user",        // ‚Üê From UserStructure.space
          localKey: "authorId", 
          foreignKey: "id",
          newField: "author"
        },
        space: "user"          // ‚Üê Same as "from"
      }
    ]
  }
);
```

### Multiple Population Levels
```typescript
const postsWithAuthorAndProfile = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id", 
          newField: "author"
        },
        space: "user"
      },
      {
        fields: {
          from: "profile",
          localKey: "author.id", // Access populated field
          foreignKey: "userId",
          newField: "authorProfile"
        },
        space: "profile"
      }
    ]
  }
);
```

## Performance Optimization

### 1. Selective Population
Only populate the fields you need:
```typescript
const posts = await PostModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
```

### 2. Pagination with Population
```typescript
const posts = await PostModel.find(
  {},
  {
    pagination: {
      limit: 10,
      page: 1
    },
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);
```

## Common Patterns

### User Management System
```typescript
const usersWithDetails = await UserModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "profile",
          localKey: "id",
          foreignKey: "userId",
          newField: "profile"
        },
        space: "profile"
      },
      {
        fields: {
          from: "post",
          localKey: "id",
          foreignKey: "authorId",
          newField: "posts"
        },
        space: "post"
      }
    ]
  }
);
```

### E-commerce System
```typescript
const productsWithDetails = await ProductModel.find(
  {},
  {
    populate: [
      {
        fields: {
          from: "category",
          localKey: "categoryId",
          foreignKey: "id",
          newField: "category"
        },
        space: "category"
      },
      {
        fields: {
          from: "review",
          localKey: "id",
          foreignKey: "productId",
          newField: "reviews"
        },
        space: "review"
      }
    ]
  }
);
```

## Real-World Use Case: Blog Management System

Based on a practical blog system implementation:

```typescript
interface Post {
  id: string;
  title: string;
  content: string;
  authorId: string;
  categoryId: string;
  publishedAt: string;
  status: "draft" | "published" | "archived";
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar: string;
}

interface Category {
  id: string;
  name: string;
  description: string;
}
const getPostsWithDetails = async (userId?: string) => {
  const posts = await PostModel.find(
    userId ? { authorId: userId } : {},
    {
      populate: [
        {
          fields: {
            from: "user",
            localKey: "authorId",
            foreignKey: "id",
            newField: "author"
          },
          space: "user"
        },
        {
          fields: {
            from: "category",
            localKey: "categoryId",
            foreignKey: "id",
            newField: "category"
          },
          space: "category"
        }
      ]
    }
  );

  return posts.map((post: any) => ({
    ...post,
    authorName: post.author?.name,
    authorEmail: post.author?.email,
    categoryName: post.category?.name
  }));
};
const calculatePostStats = (posts: any[]) => {
  let publishedPosts = 0;
  let draftPosts = 0;
  let archivedPosts = 0;

  posts.forEach((post: any) => {
    switch (post.status) {
      case "published":
        publishedPosts++;
        break;
      case "draft":
        draftPosts++;
        break;
      case "archived":
        archivedPosts++;
        break;
    }
  });

  return {
    total: posts.length,
    published: publishedPosts,
    draft: draftPosts,
    archived: archivedPosts
  };
};
```

## Troubleshooting

### Common Issues

1. **No Related Data Found**
   - Check that the `localKey` and `foreignKey` values match
   - Verify the source space exists and contains data
   - **Verify the `from` and `space` values match your schema definitions**

2. **Type Errors**
   - Define proper TypeScript interfaces for populated data
   - Use optional chaining when accessing populated fields

3. **Performance Issues**
   - Limit the number of populated fields
   - Use pagination for large datasets
   - Consider if population is necessary for your use case

4. **Space Name Errors**
   - Ensure `from` and `space` values match the `space` property in your schema definitions
   - Check that the source record space exists in your project
   - Verify spelling and case sensitivity of space names

### Debugging Tips

```typescript
const posts = await PostModel.find(
  { authorId: "user123" },
  {
    populate: [
      {
        fields: {
          from: "user",
          localKey: "authorId",
          foreignKey: "id",
          newField: "author"
        },
        space: "user"
      }
    ]
  }
);

console.log('Posts with population:', JSON.stringify(posts, null, 2));
```

## Best Practices Summary

1. **Use Descriptive Field Names**: Choose clear names for `newField` that indicate the relationship
2. **Handle Missing Data**: Always use optional chaining when accessing populated fields
3. **Type Safety**: Define TypeScript interfaces for your populated data structures
4. **Performance**: Only populate what you need and consider pagination for large datasets
5. **Error Handling**: Gracefully handle cases where related data doesn't exist

## Next Steps

- [Population API Reference](/methods/populate)
- [Schema Overview](/schema/overview)
- [Find Method](/methods/find)

## SDK
### /sdk/index
URL: https://docs.nobox.cloud/sdk/index

# Building SDK for Nobox Core API

## Introduction
This documentation provides guidance on building an SDK (Software Development Kit) for the Nobox Core API. The API uses the OpenAPI 3.0.0 specification and provides various endpoints to interact with the Nobox platform.

{% callout type="note" %}
AI integration does not require an SDK. To call AI models, use the direct HTTP endpoint documented here: [AI Models (Direct API)](/ai/access-model).
{% /callout %}

## SDK Components
These SDK you will be developing would possibly have the following:

1. API Request Methods: Methods for making requests to the various endpoints of the Nobox API.
2. Authentication: Handling authentication with the API using the "bearer" token.
3. Models: Define data models to represent the responses from the API.
4. Error Handling: Handle API errors gracefully and provide meaningful error messages.
5. Utility Functions: Additional utility functions to enhance SDK usability.

## Building the SDK
As far as we are concerned,a NOBOX SDK is simply a wrapper around the Nobox Core API endpoints. This document will outline and explain each endpoint and how it can be used. Most of these endpoints share some similarities too, making it easy to implement.

## Nobox API Endpoints
- Base URL: https://api.nobox.cloud
- Authentication: Auth token can be generated on https://nobox.cloud by registering or logging into the dashboard
- Allowed Methods in the SDK 
    There are three types of methods that the API faciliates:
    - Rowed Schema Methods:
         This includes:
            - find,
            - findOne,
            - search,
            - insert,
            - insertOne,
            - updateOne,
            - updateOneById,
            - getTokenOwner
    - KeyGroup Schema Methods:
        This includes:
            - setKeys
            - getKeys
   - In-built Function Methods:
        This includes:
            - login

### Methods Implementation: 
Here , we explain how each of the methods can be built using the Nobox Core API. As of right now, all calls to the Nobox API is RESTful and there are certain headers that needs to passed to all API Endpoint calls.

Compulsory Headers:
These headers need to be passed with your API calls. Apart from the `authorization` and the `structure` headers, the values of the other headers are expected to be used as is.
  - 'Accept: application/json, text/plain, */*'
  - 'authorization: Bearer [token]'
  - 'auto-create-project: true'
  - 'auto-create-record-space: true'
  - 'clear-all-spaces: false'
  - 'mutate: true'
  - 'structure: [structure]'

- `[token]` represents the token you generated on the Nobox Dashboard
- `[structure]` represents the stringified structure of the record space you are making a call to

### Find:
-  Introduction
The `FIND_ONE` endpoint in the Nobox Core API is used to retrieve a single record that matches the specified criteria. It allows you to search for a specific user based on their email and password. This documentation provides details on how to make a request to the `FIND_ONE` endpoint and explains the required headers and parameters.

- Verb: GET
- Url: `https://api.nobox.cloud/[project-slug]/[record-space-slug]`
> Where `[project-slug]` and `[record-space-slug]` should be replaced with the slug of your project and slug of recordspace you are making a call on.
- Url Params: `?age=22&gender=male`
> the Url Params represent the kind of data being queried, in this case, you are looking for a record that has a matching data of `{age: 22, gender: "male"}`. FYI, this data will be reformated in the NOBOX API based on the TYPE supplied in the `structure` header for the related fields.
- Find-specific Headers: These are headers that should are specific to the FIND API call
  - `'options: {"paramRelationship":"And"}'` or `'options: {"paramRelationship":"And"}'`
When you use `'options: {"paramRelationship":"And"}'`, it means both conditions (age and gender) must be true for a user to be included in the result. In other words, as the example stated previously, the user must be 22 years old and male.
When you use ``,  it means both conditions (age and gender) must be true for a user to be included in the result. In other words, as the example stated previously, the user must be 22 years old and male.

Here is an example of a CURL find on the Nobox Core API
```
curl --request GET \
  --url 'https://api.nobox.cloud/kitchenApp/users?age=22&gender=male' \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Origin: http://localhost:8081' \
  --header 'Referer: http://localhost:8081/' \
  --header 'authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNjI3MjM5MzYzfQ.3kxhzvCD6GInXJYzCEZtVpBHbTn10hXyHM2Wt86URp0' \
  --header 'auto-create-project: true' \
  --header 'auto-create-record-space: true' \
  --header 'clear-all-spaces: false' \
  --header 'mutate: true' \
  --header 'options: {"paramRelationship":"And"}' \
  --header 'structure: {"name":"Users","description":"List of Users Using my Kitchen App","projectSlug":"kitchenApp","slug":"users","recordStructure":[{"required":true,"unique":false,"description":"Age of the user","comment":"","hashed":false,"type":"NUMBER","slug":"age","name":"age"},{"required":true,"unique":false,"description":"Name of the user","comment":"","hashed":false,"type":"TEXT","slug":"name","name":"name"},{"required":true,"unique":false,"description":"Password of the user","comment":"","hashed":true,"type":"TEXT","slug":"password","name":"password"},{"required":false,"unique":false,"description":"Gender of the user","comment":"","hashed":false,"type":"TEXT","slug":"gender","name":"gender","defaultValue":"undisclosed"}]}' \
  ```
### FIND_ONE

#### Introduction
The `FIND_ONE` endpoint in the Nobox Core API is used to retrieve a single record that matches the specified criteria. It allows you to search for a specific user based on their email and password. This documentation provides details on how to make a request to the `FIND_ONE` endpoint and explains the required headers and parameters.
- Verb: GET
- Url: `https://api.nobox.cloud/[project-slug]/[record-space-slug]/_single_`
> Where `[project-slug]` and `[record-space-slug]` should be replaced with the slug of your project and slug of recordspace you are making a call on.
- Url Params: `?age=22&gender=male`
> the Url Params represent the kind of data being queried, in this case, you are looking for a record that has a matching data of `{age: 22, gender: "male"}`. FYI, this data will be reformated in the NOBOX API based on the TYPE supplied in the `structure` header for the related fields.
- Find-specific Headers: These are headers that should are specific to the FIND API call
  - `'options: {"paramRelationship":"And"}'` or `'options: {"paramRelationship":"And"}'`
When you use `'options: {"paramRelationship":"And"}'`, it means both conditions (age and gender) must be true for a user to be included in the result. In other words, as the example stated previously, the user must be 22 years old and male.
When you use ``,  it means both conditions (age and gender) must be true for a user to be included in the result. In other words, as the example stated previously, the user must be 22 years old and male.

## CURL Command Example
Here's an example `curl` command for making a `FIND_ONE` request to the Nobox Core API for the "User" record space:

```bash
curl --request GET \
  --url 'https://api.nobox.cloud/kitchenApp/users/_single_?age=22&gender=male' \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Origin: http://localhost:8081' \
  --header 'Referer: http://localhost:8081/' \
  --header 'authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNjI3MjM5MzYzfQ.3kxhzvCD6GInXJYzCEZtVpBHbTn10hXyHM2Wt86URp0' \
  --header 'auto-create-project: true' \
  --header 'auto-create-record-space: true' \
  --header 'clear-all-spaces: false' \
  --header 'mutate: true' \
  --header 'options: {"paramRelationship":"And"}' \
  --header 'structure: {"name":"Users","description":"List of Users Using my Kitchen App","projectSlug":"kitchenApp","slug":"users","recordStructure":[{"required":true,"unique":false,"description":"Age of the user","comment":"","hashed":false,"type":"NUMBER","slug":"age","name":"age"},{"required":true,"unique":false,"description":"Name of the user","comment":"","hashed":false,"type":"TEXT","slug":"name","name":"name"},{"required":true,"unique":false,"description":"Password of the user","comment":"","hashed":true,"type":"TEXT","slug":"password","name":"password"},{"required":false,"unique":false,"description":"Gender of the user","comment":"","hashed":false,"type":"TEXT","slug":"gender","name":"gender","defaultValue":"undisclosed"}]}' \
  ```

### /sdk/how-to-create-header-structure
URL: https://docs.nobox.cloud/sdk/how-to-create-header-structure
DESCRIPTION: string; // description of record space

# Creating the Structure Header Field.
When interacting with the Nobox Core API , it is required to send a Header field called `structure` alongside every request made. Clearly, this field is stringified. This page explains how to create the value of this field.

First, lets talk about the model of this structure.

#### Pseudo Code of how the Model looks like
```ts
interface Structure {
  name: string; // name of record space
  description: string; // description of record space
  projectSlug: string; // project slug 
  slug: string; // record space slug
  recordStructure: RecordFieldStructure[]; // an array of the meta data of each record space field
  initialData?: Record<string, string | number | any[]>[]; // an optional array of records that follows the validation criteria of the meta data of the record space field
}

interface RecordFieldStructure {
  required: boolean;
  unique: boolean;
  description: string;
  comment: string;
  hashed: boolean;
  type: string;
  slug: string;
  name: string;
  defaultValue?: any;
}
```

Based on the Pseudo Code above, lets create our structure before we stringify it and make it ready for transport.

We will be creating the structure for a record space called Users with four fields: `age`, `name`, `password` and `gender` and the project would be a kitchen app.

Let's get to it.

Here is how my structure will look like without the recordStructure field.

```js
{
    name:  "Users",
    description: "List of Users Using my Kitchen App",
    projectSlug: "kitchenApp", // FYI, this value is the same for all structures you create
    slug: "users",
}
```
Nice, but we are not done yet. Let's add the recordStructure, remember I mentioned that this Record Space has four fields,
`age`, `name`, `password` and `gender`, this is where we explain their structure using the `RecordFieldStructure` interface.

```js
{
  name: "Users",
  description: "List of Users Using my Kitchen App",
  projectSlug: "kitchenApp",// FYI, this value is the same for all structures you create
  slug: "users",
  recordStructure: [
    {
      required: true,
      unique: false,
      description: "Age of the user",
      comment: "",
      hashed: false,
      type: "NUMBER",
      slug: "age",
      name: "age",
    },
    {
      required: true,
      unique: false,
      description: "Name of the user",
      comment: "",
      hashed: false,
      type: "TEXT",
      slug: "name",
      name: "name",
    },
    {
      required: true,
      unique: false,
      description: "Password of the user",
      comment: "",
      hashed: true,
      type: "TEXT",
      slug: "password",
      name: "name",
    },
    {
      required: false,
      unique: false,
      description: "Gender of the user",
      comment: "",
      hashed: false,
      type: "TEXT",
      slug: "gender",
      name: "gender",
      defaultValue: "undisclosed"
    },
  ],
}
```

As you can see, each object of the array gives an idea of how each of the fields is meant to operate. Here is a further breakdown:
- required (boolean): Indicates whether the field is required or optional.
- unique (boolean): Indicates if this field can have same values for different records, this will usually be `true` for a username field
- description (string): this field explains what the field is all about, you can leave it as an empty string
- comment (string): this field provides additional information about the field, more like a developer note. you can leave it as an empty string
- hashed (boolean): this field decides if the value of this field should be hashed or not. If this is true, the value of this field will be hashed on nobox database , and it won't be returned in queries but can still find a record using the value of this field. This is usually `true` for a password field.
- type (string): This can either be "TEXT" ,  "NUMBER" or "ARRAY". It simply provides validation for the type of value this field is designed.
- name (string): the name of the field, this name will be used to determine the name of the field key in the object that gets returned for this record space and the object that gets inserted in this record space. 
- slug (string): This is a unique identifier for this field. It should not be the same with any other field. Preferably, a lower case alphanumeric character 
- defaultValue (string): This value is what gets stored as the value of a field when it is set when inserting records.

## Interface Definition Guidelines

When creating TypeScript interfaces for your record structures, follow these best practices:

### ‚ùå Don't Include These Fields
- `id` - Automatically generated by Nobox
- `createdAt` - Automatically set by Nobox
- `updatedAt` - Automatically updated by Nobox

### ‚úÖ Correct Interface Definition
```ts
import { ReturnObject } from "nobox-client";

interface User {
  name: string;
  age: number;
  email: string;
}
```

### Using ReturnObject for Type Safety
```ts
const user: ReturnObject<User> = await getUser(id);
```

## Functions
### Nobox Login - API Reference
URL: https://docs.nobox.cloud/functions/login
DESCRIPTION: Explanation of the Nobox inbuilt function "Login"

# Nobox Login

The Nobox inbuilt function "Login" allows users to authenticate and obtain an access token for accessing protected resources within the application. This function is commonly used for user authentication and session management.

## Function Signature

```ts
login({ email, password }: { email: string, password: string }): Promise<{ token: string, user: UserType } | null>
```

## Parameters
- email (string): The email of the user for authentication.
- password (string): The password of the user for authentication.

## Return Value
A promise that resolves to an object containing the access token and the user information if the authentication is successful. If the authentication fails, the promise resolves to null.

##Example: Basic Usage

```ts
import {  getFunctions } from "./nobox";
export const Nobox = getFunctions(config);
const email = 'user@example.com';
const password = 'password123';
const response = await Nobox.login({
      body: {
        email,
        password
      },
      space: UserStructure,
});

if (result) {
  const { token, user } = result;
  console.log('Logged in successfully');
  console.log('Access Token:', token);
  console.log('User:', user);
} else {
  console.log('Login failed');
}
```

In the above example, we define the login credentials with the user's email and password. Then, we call the login function with the provided credentials and await the result. If the authentication is successful, we log the access token and user information to the console. Otherwise, we log a failure message.

### Call AI Models (OpenAI-Compatible API)
URL: https://docs.nobox.cloud/ai/access-model
DESCRIPTION: Access 300+ AI models through our OpenAI-compatible API endpoint. Drop-in replacement for OpenAI API calls.

## Overview

Nobox provides access to **300+ AI models** from providers like OpenAI, Anthropic, Google, and Meta through a single, **OpenAI-compatible API endpoint**. 

Use our API as a **drop-in replacement** for OpenAI API calls - it works with official OpenAI client libraries and existing code.
c
### Chat Completions Endpoint

- Method: POST
- Path: `/_f_/v1/chat/completions`
- Base URL: `https://api.nobox.cloud`

#### Required headers

- `Authorization`: `Bearer <user-token>`
- `Content-Type`: `application/json`

#### Request body

```ts
{
  model: string;                    // model id or public_id
  messages: Array<{
    role: 'system' | 'user' | 'assistant';
    content: string | Array<{
      type: 'text' | 'image_url' | 'input_audio';
      text?: string;
      image_url?: { url: string };
      input_audio?: { data: string; format: string };
    }>;
  }>;
  temperature?: number;             // 0-2, default varies by model
  max_tokens?: number;              // maximum tokens to generate
  stream?: boolean;                 // enable streaming responses
}
```

#### Response format

```ts
{
  id: string;                       // completion id
  object: "chat.completion";
  created: number;                  // unix timestamp
  model: string;                    // model used
  choices: Array<{
    index: number;
    message: {
      role: "assistant";
      content: string;
    };
    finish_reason: "stop" | "length" | "content_filter";
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}
```

## Examples

### JavaScript with OpenAI Client

```javascript
import OpenAI from 'openai';

const client = new OpenAI({
  baseURL: 'https://api.nobox.cloud/_f_/v1',
  apiKey: 'your-nobox-user-token'
});

const response = await client.chat.completions.create({
  model: 'gpt-4o', // or claude-3.5-sonnet, gemini-pro, llama-3.3-70b
  messages: [
    { role: 'system', content: 'You are a helpful assistant.' },
    { role: 'user', content: 'Explain quantum computing in simple terms.' }
  ],
  temperature: 0.7,
  max_tokens: 150
});

console.log(response.choices[0].message.content);
```

### Python with OpenAI Client

```python
from openai import OpenAI

client = OpenAI(
    base_url="https://api.nobox.cloud/_f_/v1",
    api_key="your-nobox-user-token"
)

response = client.chat.completions.create(
    model="anthropic/claude-3.5-sonnet",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Write a haiku about programming"}
    ],
    temperature=0.7,
    max_tokens=150
)

print(response.choices[0].message.content)
```

### Direct HTTP Request

```javascript
const response = await fetch('https://api.nobox.cloud/_f_/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer your-nobox-user-token',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    model: 'google/gemini-pro',
    messages: [
      { role: 'user', content: 'What are the benefits of renewable energy?' }
    ],
    temperature: 0.5,
    max_tokens: 200
  })
});

const data = await response.json();
console.log(data.choices[0].message.content);
```

### Streaming Response

```javascript
const response = await fetch('https://api.nobox.cloud/_f_/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer your-nobox-user-token',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    model: 'meta/llama-3.3-70b',
    messages: [{ role: 'user', content: 'Tell me a story about space exploration' }],
    stream: true
  })
});

const reader = response.body.getReader();
const decoder = new TextDecoder();

while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  
  const chunk = decoder.decode(value);
  const lines = chunk.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('data: ')) {
      const data = line.slice(6);
      if (data === '[DONE]') return;
      
      try {
        const parsed = JSON.parse(data);
        const content = parsed.choices?.[0]?.delta?.content;
        if (content) process.stdout.write(content);
      } catch (e) {
      }
    }
  }
}
```

## Available Models

Access **300+ models** from top providers:

| Provider | Popular Models | Model IDs |
|----------|----------------|-----------|
| **OpenAI** | GPT-4o, GPT-4.1, o1, o3 | `gpt-4o`, `gpt-4-turbo`, `o1-preview` |
| **Anthropic** | Claude 3.5 Sonnet, Claude 4 | `anthropic/claude-3.5-sonnet`, `anthropic/claude-4` |
| **Google** | Gemini Pro, Gemini Flash | `google/gemini-pro`, `google/gemini-flash` |
| **Meta** | Llama 3.3 70B, Llama 4 | `meta/llama-3.3-70b`, `meta/llama-4` |
| **DeepSeek** | DeepSeek R1, DeepSeek V3 | `deepseek/deepseek-r1`, `deepseek/deepseek-v3` |

[**View All 300+ Models ‚Üí**](/allowed-models)

## List Available Models

Get the complete list of models available to your account:

```javascript
const response = await fetch('https://api.nobox.cloud/_f_/models', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer your-nobox-user-token',
    'Content-Type': 'application/json'
  }
});

const { data: models } = await response.json();
console.log(models);
```

## Error Handling

Common error responses:

- **400**: Insufficient funds in wallet
- **401**: Invalid or missing authorization token  
- **404**: Model not found
- **429**: Rate limit exceeded
- **500**: Provider or internal server error

Example error response:
```json
{
  "error": {
    "type": "insufficient_funds",
    "message": "Insufficient wallet balance to complete this request"
  }
}
```

## Next Steps

- **[View All Models](/allowed-models)** - Browse the complete catalog of 300+ AI models
- **[Get Started](https://dashboard.nobox.cloud)** - Create account and get your API token
- **[Database Operations](/install-nobox)** - Add backend capabilities to your AI apps

## Examples
### Example Usage
URL: https://docs.nobox.cloud/nobox-examples
DESCRIPTION: How to use nobox via examples

# {% $markdoc.frontmatter.title %}

Since you have created the needed structure in the installation and integration process. Below are examples of how nobox can be used.

### Example 1: Insert Data

  ```ts
  import UserModel from "../record-structures/user.ts";
  const returnedData = await UserModel.insertOne({
    email: "test@gmail.com",
    password: "123456",
    firstName: "akintunde",
    age: 24
  });
  ```

### Example 2: Insert Data in React

When using React, the code will resemble the example below. Pay attention to how the UserModel is utilized in the code snippet.

```ts
import React, { useState } from 'react';
import UserModel from '../record-structures/user.ts';

function UserComponent() {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    firstName: '',
    age: '',
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevState: any) => ({
      ...prevState,
      [name]: name === "age" ? Number(value) : value,
    }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    const returnedData = await UserModel.insertOne(formData); // Nobox was used here
    console.log('User created:', returnedData);
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <label>
          Email:
          <input
            type="text"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Password:
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          First Name:
          <input
            type="text"
            name="firstName"
            value={formData.firstName}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Age:
          <input
            type="number"
            name="age"
            value={formData.age}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <button type="submit">Add User</button>
      </form>
    </div>
  );
}
```

### Example 3: Performing CRUD operations
 
 ```ts
const insertedData = await UserModel.insertOne(data);
console({ insertedData });
const foundData = await UserModel.findOne({id: insertedData.id});
console.log({ foundData})
const updatedData = await UserModel.updateOneById(id, { firstName: "akin2"})
console.log({ updatedData})
const allData = await UserModel.find({email: "test@gmail.com"})
console.log(allData);
```
## Next steps

- [Schema Overview](//schema/overview)

